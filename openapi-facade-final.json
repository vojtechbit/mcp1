{
  "openapi": "3.1.0",
  "info": {
    "title": "Alfred Assistant API",
    "version": "2.1.0",
    "description": "Complete API for managing Gmail, Google Calendar, Contacts, and Tasks. High-level macros for common workflows and low-level RPC for advanced control. All times use Europe/Prague timezone."
  },
  "servers": [
    {
      "url": "https://mcp1-oauth-server.onrender.com/api",
      "description": "Production server"
    }
  ],
  "paths": {
    "/macros/inbox/overview": {
      "post": {
        "operationId": "macroInboxOverview",
        "summary": "Get lightweight inbox overview",
        "description": "Quick email overview without body text. Perfect for 'Who emailed me today?' Returns sender, subject, timestamp. Default returns ALL emails in timeRange (up to 200). For body snippets, use /macros/inbox/snippets.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Returns ALL emails in specified timeRange by default (up to 200 max). Use filters to narrow results. If user asks 'Who emailed me today?', this returns complete list of today's emails, not just a subset. Only use maxItems if user explicitly wants to limit results (e.g., 'show me last 10 emails').",
                "properties": {
                  "timeRange": {
                    "type": "object",
                    "description": "Time window for emails. Use 'relative' property for natural periods like 'today', 'yesterday', 'thisWeek'. Automatically converts to Europe/Prague timezone. When user asks about 'today', use {relative:'today'} to get ALL today's emails.",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": ["lastHour", "last3h", "last24h", "today", "yesterday", "thisWeek", "last7d"],
                        "description": "Natural time window: 'today'=ALL today's emails (00:00-23:59 Europe/Prague), 'thisWeek'=ALL this week Mon-Sun, 'last24h'=last 24 hours, 'yesterday'=ALL yesterday's emails, 'last7d'=past 7 days. Default behavior: returns ALL emails in period, not subset."
                      }
                    }
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 200,
                    "default": 100,
                    "description": "Max emails to return. Default 100 ensures complete results for typical daily/weekly volumes. ONLY reduce if user explicitly requests limited results (e.g., 'show me last 5 emails'). When user asks 'what emails today?', use default to get ALL. Max 200 total. If more exist, response includes subset=true."
                  },
                  "filters": {
                    "type": "object",
                    "description": "Optional filters to narrow results. Use when user specifies sender, attachment requirements, or inbox category. Example: 'emails from John' -> {from:'john'}, 'emails with attachments' -> {hasAttachment:true}, 'show Primary inbox' -> {category:'primary'}.",
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Filter by sender email or name. Partial match, case-insensitive. Use when user asks about emails from specific person/company. Examples: 'john@example.com', 'john', 'acme corp'. Empty/omit for all senders."
                      },
                      "hasAttachment": {
                        "type": "boolean",
                        "description": "If true, ONLY emails with attachments. Use when user asks 'emails with files' or 'show me emails with attachments'. Omit (don't set false) for all emails regardless of attachments."
                      },
                      "category": {
                        "type": "string",
                        "enum": ["primary", "work", "promotions", "social", "updates", "forums"],
                        "description": "Filter by inbox category/label. Use when user asks to view specific inbox sections. Examples: 'Show me my Primary inbox' -> {category:'primary'}, 'Check Promotions' -> {category:'promotions'}, 'Social notifications' -> {category:'social'}. This maps to Gmail's internal category labels (CATEGORY_PERSONAL, CATEGORY_PROMOTIONS, etc.). Omit to search all categories."
                      }
                    }
                  }
                }
              },
              "examples": {
                "todaysEmails": {
                  "summary": "ALL today's emails (typical query)",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    }
                  }
                },
                "fromSpecificSender": {
                  "summary": "ALL emails from John today",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "filters": {
                      "from": "john"
                    }
                  }
                },
                "limitedResults": {
                  "summary": "Last 10 emails only (user explicitly wants limit)",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "maxItems": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved email overview",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "Array of email cards. Contains ALL emails in timeRange (up to maxItems limit). If user asked 'emails today', this is complete list of today's emails. Each has messageId for reading full content with /macros/email/quickRead.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "description": "Gmail message ID. Use with /macros/email/quickRead to read full email body and attachments."
                          },
                          "senderName": {
                            "type": "string",
                            "description": "Sender display name (e.g., 'John Smith'). Empty if not set."
                          },
                          "senderAddress": {
                            "type": "string",
                            "description": "Sender email (e.g., 'john@example.com'). Always present."
                          },
                          "subject": {
                            "type": "string",
                            "description": "Email subject. Empty string if no subject."
                          },
                          "receivedAt": {
                            "type": "string",
                            "description": "ISO 8601 timestamp when received (UTC), e.g., '2025-10-19T14:30:00Z'"
                          },
                          "inboxCategory": {
                            "type": "string",
                            "description": "Auto-category: 'primary'(important), 'work', 'alerts', 'newsletters', 'social', 'updates', 'forums', 'other'"
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "If true, MORE emails exist beyond this response (exceeded maxItems limit). User should know there are additional emails. If false, this is COMPLETE list of all matching emails."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "Token for next page. Null if subset=false (all results included). If subset=true, inform user there are more emails and offer to fetch them."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/inbox/snippets": {
      "post": {
        "operationId": "macroInboxSnippets",
        "summary": "Get inbox with email body snippets",
        "description": "Emails WITH body preview (200-300 chars) and attachment URLs. Perfect for 'What did John say?' Returns ALL matching emails by default (up to 50). Attachment URLs expire 1 hour. For full bodies, use /macros/email/quickRead.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Returns ALL emails in timeRange with body snippets (up to 50 max due to snippet processing). Default behavior: complete results for user's query, not subset. Includes signed attachment download URLs (expire 1h). Lower max than overview (50 vs 200) due to body snippet processing cost.",
                "properties": {
                  "timeRange": {
                    "type": "object",
                    "description": "Time window for emails. When user asks 'what did John say today?', use {relative:'today'} to get ALL today's emails with body previews.",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": ["lastHour", "last3h", "last24h", "today", "yesterday", "thisWeek", "last7d"],
                        "description": "Natural time periods. 'today'=ALL today's emails with snippets, 'thisWeek'=ALL this week's emails. Default returns complete set, not partial."
                      }
                    }
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 50,
                    "description": "Max emails with snippets. Default 50 (max allowed) ensures complete results. Lower max than overview due to snippet processing. ONLY reduce if user explicitly wants fewer (e.g., 'show last 5 emails with preview'). When user asks 'what are today's emails about?', use default to get ALL."
                  },
                  "includeAttachments": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true (default), includes signed download URLs for attachments (expire 1h). Set false only if attachments explicitly not needed for faster response. Most queries should use default true."
                  },
                  "filters": {
                    "type": "object",
                    "description": "Optional filters. Use when user specifies sender or wants only emails with attachments.",
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Filter by sender. Use when user asks about specific person. Examples: 'john@example.com', 'john', 'acme'. Partial match."
                      },
                      "hasAttachment": {
                        "type": "boolean",
                        "description": "If true, ONLY emails with attachments. Use for 'show emails with files' queries. Omit for all emails."
                      }
                    }
                  }
                }
              },
              "examples": {
                "todayWithSnippets": {
                  "summary": "ALL today's emails with body previews",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    }
                  }
                },
                "recentFromSender": {
                  "summary": "ALL recent emails from John with previews",
                  "value": {
                    "timeRange": {
                      "relative": "last24h"
                    },
                    "filters": {
                      "from": "john"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved emails with snippets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "ALL emails in timeRange with body snippets (up to maxItems). If user asked about today's emails, this is complete set with previews.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "description": "Gmail message ID for reading full email"
                          },
                          "senderName": {
                            "type": "string"
                          },
                          "senderAddress": {
                            "type": "string"
                          },
                          "subject": {
                            "type": "string"
                          },
                          "receivedAt": {
                            "type": "string"
                          },
                          "snippet": {
                            "type": "string",
                            "description": "First 200-300 chars of body (plain text, HTML stripped). Enough to understand email content without reading full message."
                          },
                          "attachmentUrls": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Signed download URLs for attachments (expire 1h). Empty array if no attachments. Max 50 per email."
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "If true, more emails exist beyond limit. Inform user there are additional emails. If false, this is COMPLETE set."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/email/quickRead": {
      "post": {
        "operationId": "macroEmailQuickRead",
        "summary": "Read full email bodies",
        "description": "Fetch complete email content with full body and attachments. Provide either specific IDs or Gmail search query. Format: snippet/minimal/full. Default reads ALL matching emails (up to 50). Use for 'Read email from John'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Read emails by ID or search query. Must provide EITHER 'ids' OR 'searchQuery'. Default format 'minimal' (5KB) balances speed and completeness. Returns ALL matching emails up to 50 max. When user says 'read emails from John about project', this reads ALL matching emails, not subset.",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": { "type": "string" },
                    "minItems": 1,
                    "maxItems": 50,
                    "description": "Array of Gmail message IDs (alternative to searchQuery)"
                  },
                  "searchQuery": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Gmail search query (alternative to ids)"
                  },
                  "format": {
                    "type": "string",
                    "enum": ["snippet", "minimal", "full"],
                    "default": "minimal",
                    "description": "Body format: 'snippet'=300 chars, 'minimal'=5KB (recommended), 'full'=complete."
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Read by IDs",
                    "required": ["ids"],
                    "properties": {
                      "ids": { "type": "array" },
                      "format": { "type": "string" }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "title": "Read by search query",
                    "required": ["searchQuery"],
                    "properties": {
                      "searchQuery": { "type": "string" },
                      "format": { "type": "string" }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "examples": {
                "readByIds": {
                  "summary": "Read 2 specific emails by ID",
                  "value": {
                    "ids": ["18abc123def456", "18abc789xyz012"],
                    "format": "minimal"
                  }
                },
                "searchAndRead": {
                  "summary": "Find and read ALL John's project emails",
                  "value": {
                    "searchQuery": "from:john@example.com subject:project",
                    "format": "minimal"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved email(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response mode: 'single' if 1 email, 'batch' if multiple. Contains complete email content for ALL requested/matching emails.",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "enum": ["single", "batch"],
                      "description": "'single'=1 email (use 'item'), 'batch'=multiple emails (use 'items' array)"
                    },
                    "item": {
                      "type": "object",
                      "description": "Single email (when mode='single'). Contains full content.",
                      "properties": {
                        "messageId": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "body": {
                          "type": "string",
                          "description": "Email body in requested format. Plain text with line breaks preserved."
                        },
                        "attachments": {
                          "type": "array",
                          "description": "Attachments with download URLs (expire 1h). Blocked files have blocked=true, url=null.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "mimeType": {
                                "type": "string"
                              },
                              "url": {
                                "type": "string",
                                "description": "Signed URL (expires 1h). Null if blocked."
                              },
                              "blocked": {
                                "type": "boolean",
                                "description": "True if blocked by security. No URL provided."
                              }
                            }
                          }
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "description": "Array of emails (when mode='batch'). Contains ALL requested/matching emails."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/plan": {
      "post": {
        "operationId": "macroCalendarPlan",
        "summary": "Get daily or weekly calendar schedule",
        "description": "Calendar events for day or week with status (past/ongoing/upcoming). Perfect for 'What's my schedule today?' Returns ALL events by default (up to 50). Scope: daily=single day, weekly=Mon-Sun. Europe/Prague timezone.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["scope", "date"],
                "description": "Returns ALL events in specified scope by default (up to 50 max). When user asks 'what's my schedule today?', returns complete daily schedule, not subset. Status computed relative to current time. Use includePast=false (default) to hide finished events.",
                "properties": {
                  "scope": {
                    "type": "string",
                    "enum": ["daily", "weekly"],
                    "description": "'daily'=ALL events in single day, 'weekly'=ALL events Mon-Sun of week. For 'schedule today' use daily. For 'this week' use weekly. Returns complete schedule, not partial."
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Anchor date (YYYY-MM-DD). Daily: this exact day. Weekly: Mon-Sun week containing this date. Examples: '2025-10-19' (today), '2025-10-26' (next week). Europe/Prague timezone."
                  },
                  "includePast": {
                    "type": "boolean",
                    "default": false,
                    "description": "If false (default), ONLY current and future events (status='ongoing' or 'upcoming'). If true, includes ALL events including past (status='past'). Use false for 'what's next?', true for 'show all today's meetings'."
                  }
                }
              },
              "examples": {
                "todaySchedule": {
                  "summary": "ALL upcoming meetings today (typical query)",
                  "value": {
                    "scope": "daily",
                    "date": "2025-10-19",
                    "includePast": false
                  }
                },
                "fullDayIncludingPast": {
                  "summary": "ALL today's meetings (past + current + future)",
                  "value": {
                    "scope": "daily",
                    "date": "2025-10-19",
                    "includePast": true
                  }
                },
                "thisWeek": {
                  "summary": "ALL this week's upcoming meetings",
                  "value": {
                    "scope": "weekly",
                    "date": "2025-10-19"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved calendar schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "range": {
                      "type": "object",
                      "description": "Time range covered",
                      "properties": {
                        "start": {
                          "type": "string",
                          "description": "Range start (ISO 8601). Daily: 00:00 of date. Weekly: Monday 00:00."
                        },
                        "end": {
                          "type": "string",
                          "description": "Range end (ISO 8601). Daily: 23:59 of date. Weekly: Sunday 23:59."
                        },
                        "tz": {
                          "type": "string",
                          "description": "Always Europe/Prague"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "description": "ALL events in range (up to 50), sorted by start time. Complete schedule for user's query.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "eventId": {
                            "type": "string",
                            "description": "Google Calendar event ID. Use for RPC update/delete."
                          },
                          "title": {
                            "type": "string"
                          },
                          "start": {
                            "type": "string",
                            "description": "Start time (ISO 8601)"
                          },
                          "end": {
                            "type": "string",
                            "description": "End time (ISO 8601)"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["past", "ongoing", "upcoming"],
                            "description": "Computed status: 'past'=ended, 'ongoing'=happening now, 'upcoming'=not started. Relative to current time."
                          },
                          "locationText": {
                            "type": "string",
                            "description": "Location: room, address, or video link"
                          },
                          "attendees": {
                            "type": "array",
                            "description": "Meeting attendees"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/schedule": {
      "post": {
        "operationId": "macroCalendarSchedule",
        "summary": "Create new calendar event (CREATE ONLY)",
        "description": "CREATE new events only. For MODIFYING existing events, use /rpc/calendar with op:update instead. Creates meeting/event with fixed time. Supports Google Meet/Zoom links. Max 20 attendees. Use for 'Schedule meeting with John tomorrow at 2pm'. Europe/Prague timezone.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "when"],
                "description": "Create calendar event with attendees, location, notes, conference links, reminders. Sends calendar invites to all attendees. Max 20 attendees, max 5 reminders. Times in ISO 8601 format (Europe/Prague).",
                "properties": {
                  "title": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event title. Be descriptive. Examples: 'Team Standup', 'Client Meeting - Acme Corp', 'Doctor Appointment'."
                  },
                  "when": {
                    "type": "object",
                    "description": "Event timing. Use fixed.start and fixed.end for specific time.",
                    "properties": {
                      "fixed": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Start time (ISO 8601). Example: '2025-10-20T14:00:00' for Oct 20, 2:00 PM Europe/Prague."
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "description": "End time (ISO 8601). Must be after start. Example: '2025-10-20T15:00:00' for 1-hour meeting."
                          }
                        },
                        "required": ["start", "end"]
                      }
                    }
                  },
                  "attendees": {
                    "type": "array",
                    "maxItems": 20,
                    "description": "Meeting attendees (max 20). Sends calendar invites. Each needs email, name optional.",
                    "items": {
                      "type": "object",
                      "required": ["email"],
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "location": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Location: room/address or video link. Examples: 'Conference Room A', '123 Main St', 'https://zoom.us/j/123'."
                  },
                  "notes": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Event description (max 2000 chars). Use for agenda, purpose, preparation instructions."
                  },
                  "conference": {
                    "type": "string",
                    "enum": ["none", "auto", "meet", "zoom"],
                    "default": "none",
                    "description": "Video link: 'none'=no video, 'meet'=Google Meet, 'zoom'=Zoom, 'auto'=default provider."
                  },
                  "reminders": {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Reminders in minutes before event (max 5). Common: 15, 30, 60, 1440 (1 day). Can set multiple: [15,60].",
                    "items": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1440
                    }
                  }
                }
              },
              "examples": {
                "simpleFixedTime": {
                  "summary": "Simple 30min meeting",
                  "value": {
                    "title": "Team Standup",
                    "when": {
                      "fixed": {
                        "start": "2025-10-20T09:00:00",
                        "end": "2025-10-20T09:30:00"
                      }
                    },
                    "reminders": [15]
                  }
                },
                "meetingWithAttendees": {
                  "summary": "Meeting with attendees + Google Meet",
                  "value": {
                    "title": "Project Review",
                    "when": {
                      "fixed": {
                        "start": "2025-10-21T14:00:00",
                        "end": "2025-10-21T15:00:00"
                      }
                    },
                    "attendees": [
                      {
                        "email": "john@example.com",
                        "name": "John Smith"
                      }
                    ],
                    "conference": "meet",
                    "reminders": [15, 60]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": "object",
                      "properties": {
                        "eventId": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "start": {
                          "type": "string"
                        },
                        "end": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/reminderDrafts": {
      "post": {
        "operationId": "macroCalendarReminderDrafts",
        "summary": "Generate reminder email drafts for upcoming events",
        "description": "Create Gmail draft reminders for event attendees. Scopes: today (all day's events) or nextHours (next N hours). Returns draft list with generated emails ready to send. Email templates customizable.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Generate reminder drafts for events. Scope: 'today'=all day's events, 'nextHours'=next N hours. Creates one draft per attendee. Templates customizable with {title}, {start}, {end}, {location}, {recipientName}.",
                "properties": {
                  "window": {
                    "type": "string",
                    "enum": ["today", "nextHours"],
                    "description": "Time window: 'today'=ALL events today, 'nextHours'=next N hours (requires hours param)"
                  },
                  "hours": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 24,
                    "description": "Lookahead window in hours (required when window='nextHours')"
                  },
                  "template": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Custom email template (optional)"
                  },
                  "includeLocation": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include location in reminder"
                  },
                  "createDrafts": {
                    "type": "boolean",
                    "default": true,
                    "description": "Create drafts or preview only"
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Generate for today",
                    "properties": {
                      "window": { "type": "string" },
                      "template": { "type": "string" },
                      "includeLocation": { "type": "boolean" },
                      "createDrafts": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "title": "Generate for next N hours",
                    "required": ["hours"],
                    "properties": {
                      "window": { "type": "string" },
                      "hours": { "type": "integer" },
                      "template": { "type": "string" },
                      "includeLocation": { "type": "boolean" },
                      "createDrafts": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "examples": {
                "todayReminders": {
                  "summary": "Generate reminders for ALL today's events",
                  "value": {
                    "window": "today"
                  }
                },
                "nextHoursReminders": {
                  "summary": "Generate reminders for next 4 hours only",
                  "value": {
                    "window": "nextHours",
                    "hours": 4
                  }
                },
                "customTemplate": {
                  "summary": "Use custom reminder template",
                  "value": {
                    "window": "today",
                    "template": "Hi {recipientName},\n\nDon't forget about {title}!\nWhen: {start}\nWhere: {location}\n\nLooking forward to seeing you!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated reminder drafts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "drafts": {
                      "type": "array",
                      "description": "Email drafts created (one per attendee per event). Ready to send or customize further.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "draftId": {
                            "type": "string",
                            "description": "Gmail draft ID. Use to access/modify/send via Gmail API. Null if createDrafts=false."
                          },
                          "to": {
                            "type": "string",
                            "description": "Recipient email address (event attendee)"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Email subject line. Format: 'Reminder: {event title}'"
                          },
                          "preview": {
                            "type": "string",
                            "description": "First 200 chars of email body for preview"
                          },
                          "eventId": {
                            "type": "string",
                            "description": "Google Calendar event ID. Use to reference original event."
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "Always false. All matching events included (no pagination)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/contacts/safeAdd": {
      "post": {
        "operationId": "macroContactsSafeAdd",
        "summary": "Add contacts with safe deduplication workflow",
        "description": "Bulk add 1-50 contacts with duplicate detection. Strategies: 'ask' (confirm duplicates), 'skip' (skip), 'merge' (auto-merge), 'create' (always add). Use 'realestate' for organization.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entries"],
                "description": "Bulk add contacts (1-50) with duplicate detection. Each entry needs 'name' (required), optional 'email'/'phone'/'realestate'/'notes'. Three deduping strategies: 'ask' (default, safe - ask user), 'skip' (skip if duplicate found), 'merge' (auto-merge if match found). Matching logic: email exact match > phone match > name exact match > partial name match. When duplicates found with strategy='ask', returns confirmToken for user to decide action.",
                "properties": {
                  "entries": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 50,
                    "description": "Contacts to add (1-50). Each: name (required), email/phone/realestate/notes (optional). Duplicate check on name/email/phone.",
                    "items": {
                      "type": "object",
                      "required": ["name"],
                      "properties": {
                        "name": {
                          "type": "string",
                          "maxLength": 255,
                          "description": "Full name (required). Examples: 'John Smith', 'Jane Doe'."
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Email (optional but recommended). Used for duplicate check."
                        },
                        "phone": {
                          "type": "string",
                          "maxLength": 20,
                          "description": "Phone any format (optional). Examples: '+420 123 456 789', '555-1234'."
                        },
                        "realestate": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Company/org (optional). Note: field name is 'realestate'. Examples: 'Acme Corp', 'Self-employed'."
                        },
                        "notes": {
                          "type": "string",
                          "maxLength": 1000,
                          "description": "Notes (optional, max 1000). Example: 'Met at conference 2024'."
                        }
                      }
                    }
                  },
                  "dedupeStrategy": {
                    "type": "string",
                    "enum": ["ask", "skip", "merge", "create"],
                    "default": "ask",
                    "description": "Duplicate handling strategy: 'ask' (default, safest) = detect duplicates and return confirmToken for user to decide, 'skip' = skip entries with duplicates (don't add), 'merge' = auto-merge into existing (preserve existing, add new fields), 'create' = always add (may create duplicates). For safest experience, use 'ask' (requires user confirmation). For bulk imports, use 'merge'."
                  }
                }
              },
              "examples": {
                "singleContact": {
                "summary": "Add single contact (safest: asks if duplicate)",
                "value": {
                "entries": [
                {
                "name": "John Smith",
                "email": "john@example.com",
                "phone": "+420 123 456 789",
                "realestate": "Acme Corp"
                }
                ],
                  "dedupeStrategy": "ask"
                  }
                },
                "bulkImportAutoMerge": {
                "summary": "Import 3 contacts with auto-merge into existing",
                "value": {
                "entries": [
                {
                "name": "Jane Doe",
                  "email": "jane@company.com"
                },
                {
                "name": "Bob Wilson",
                  "email": "bob@startup.io"
                  },
                  {
                      "name": "Alice Brown",
                        "phone": "+420 999 888 777"
                        }
                      ],
                      "dedupeStrategy": "merge"
                    }
                  },
                  "bulkImportSkip": {
                    "summary": "Import but skip any duplicates found",
                    "value": {
                      "entries": [
                        {
                          "name": "Bob Wilson",
                          "email": "bob@startup.io"
                        }
                      ],
                      "dedupeStrategy": "skip"
                    }
                  }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contacts processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "description": "Successfully created new contacts. Each item: {name, email}",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {"type": "string"},
                          "email": {"type": "string"}
                        }
                      }
                    },
                    "merged": {
                      "type": "array",
                      "description": "Successfully merged into existing contacts (when strategy=merge). Each item: {merged_into (email), from (name), fields_updated (array of field names)}. Preserve existing contact data, add new fields from entry.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "merged_into": {"type": "string", "description": "Email of existing contact that was merged into"},
                          "from": {"type": "string", "description": "Name of new contact that was merged"},
                          "fields_updated": {"type": "array", "description": "Which fields were updated (phone, notes, etc)"}
                        }
                      }
                    },
                    "skipped": {
                      "type": "array",
                      "description": "Entries that could not be processed. Reason: 'found duplicates' (strategy=ask or skip), 'merge failed', 'add failed'. Each item: {email, name, reason, existing (duplicate contacts if found)}.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {"type": "string"},
                          "name": {"type": "string"},
                          "reason": {"type": "string"},
                          "existing": {"type": "array", "description": "Existing contacts that matched (if duplicates found)"}
                        }
                      }
                    },
                    "confirmToken": {
                      "type": "string",
                      "description": "Present ONLY if strategy='ask' and duplicates found. User must call /api/macros/confirm with this token and action (create/skip/merge) to proceed."
                    },
                    "warnings": {
                      "type": "array",
                      "description": "Informational messages for user (e.g., 'Found 2 duplicates. Call /api/macros/confirm...')",
                      "items": {"type": "string"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/tasks/overview": {
      "post": {
        "operationId": "macroTasksOverview",
        "summary": "Get tasks overview",
        "description": "Google Tasks grouped by status. Scopes: daily (today only) or weekly (this week). Returns ALL tasks in scope: today/thisWeek/overdue sections, optionally completed. Use for 'What are my tasks today?'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["scope"],
                "description": "Returns ALL tasks in specified scope grouped by due date. Daily=ALL today's tasks, weekly=ALL this week's tasks. Four sections: 'today', 'thisWeek', 'overdue', 'completed' (if includeCompleted=true). Complete task list, not subset.",
                "properties": {
                  "scope": {
                    "type": "string",
                    "enum": ["daily", "weekly"],
                    "description": "'daily'=ALL tasks due today (24 hours). 'weekly'=ALL tasks due this week (Mon-Sun). Complete list, not subset."
                  },
                  "includeCompleted": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, includes completed tasks in 'completed' section. If false (default), only active tasks. Use true for 'what I accomplished', false for 'what's left to do'."
                  }
                }
              },
              "examples": {
                "dailyTasks": {
                  "summary": "ALL today's active tasks (typical)",
                  "value": {
                    "scope": "daily",
                    "includeCompleted": false
                  }
                },
                "weeklyTasks": {
                  "summary": "ALL this week's active tasks",
                  "value": {
                    "scope": "weekly"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sections": {
                      "type": "object",
                      "description": "ALL tasks grouped by section. Complete list for scope.",
                      "properties": {
                        "today": {
                          "type": "array",
                          "description": "ALL tasks due today (not completed)"
                        },
                        "thisWeek": {
                          "type": "array",
                          "description": "ALL tasks due this week (not today)"
                        },
                        "overdue": {
                          "type": "array",
                          "description": "ALL overdue tasks (past due date)"
                        },
                        "completed": {
                          "type": "array",
                          "description": "Completed tasks (if includeCompleted=true)"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/contacts": {
      "post": {
        "operationId": "contactsRpc",
        "summary": "Advanced contact RPC operations (9 operations)",
        "description": "Low-level contact operations: list, search, add, update, delete, dedupe, bulkUpsert, bulkDelete, addressSuggest. Use /macros/contacts/safeAdd for safe workflow, /rpc/contacts for direct control.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op"],
                "description": "Contact RPC operations. KEY WORKFLOWS:\n\n**WORKFLOW 1 - REMOVE DUPLICATES (keep best contact, delete extras):**\n  Step 1: Call {\"op\": \"dedupe\"} → Returns groups like {rowIndex: [2, 3, 5]} meaning 3 duplicates\n  Step 2: Analyze which rowIndex is BEST (most recent/complete data)\n  Step 3: Call bulkDelete with rowIds of EXTRAS ONLY: {\"op\": \"bulkDelete\", \"params\": {\"rowIds\": [3, 5]}} (keep 2)\n\n**WORKFLOW 2 - DELETE ENTIRE CONTACT (all occurrences):**\n  Call {\"op\": \"bulkDelete\", \"params\": {\"emails\": [\"john@example.com\"]}} → Deletes ALL rows with that email\n\n**IMPORTANT:** bulkDelete has TWO modes:\n  - emails mode: Deletes COMPLETE contact (all rows with email)\n  - rowIds mode: Deletes SPECIFIC rows (surgical, keeps others with same email)\n\nAlways use rowIds mode for duplicate cleanup (keeps one), emails mode for complete removal.",
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["list", "search", "add", "update", "delete", "dedupe", "bulkUpsert", "bulkDelete", "addressSuggest"],
                    "description": "Contact operation to perform"
                  },
                  "params": {
                    "type": "object",
                    "description": "Operation-specific parameters. See examples for each operation's structure."
                  }
                }
              },
              "examples": {
                "list": {
                  "summary": "Get all contacts",
                  "value": {"op": "list"}
                },
                "search": {
                  "summary": "Search for 'john'",
                  "value": {"op": "search", "params": {"query": "john"}}
                },
                "add": {
                  "summary": "Add single contact",
                  "value": {"op": "add", "params": {"name": "John Smith", "email": "john@example.com"}}
                },
                "update": {
                  "summary": "Update existing contact",
                  "value": {"op": "update", "params": {"name": "John Smith", "email": "john@example.com", "phone": "+420 999 999 999"}}
                },
                "delete": {
                  "summary": "Delete by email",
                  "value": {"op": "delete", "params": {"email": "old@example.com"}}
                },
                "dedupe": {
                  "summary": "Find duplicate contacts",
                  "value": {"op": "dedupe"}
                },
                "bulkUpsert": {
                  "summary": "Batch add contacts",
                  "value": {"op": "bulkUpsert", "params": {"contacts": [{"name": "Alice", "email": "alice@example.com"}, {"name": "Bob", "email": "bob@example.com"}]}}
                },
                "bulkDelete": {
                  "summary": "Delete contacts by email (mode 1) or specific rows (mode 2)",
                  "value": {"op": "bulkDelete", "params": {"rowIds": [3, 5]}}
                },
                "addressSuggest": {
                  "summary": "Get address suggestions from realEstate field",
                  "value": {"op": "addressSuggest", "params": {"query": "Vrchlického"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {"type": "boolean", "description": "Always true on success"},
                    "data": {"type": "object", "description": "Response data (varies by operation)"}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {"type": "string"},
                    "message": {"type": "string"},
                    "code": {"type": "string", "enum": ["INVALID_PARAM"]}
                  }
                }
              }
            }
          },
          "401": {"description": "Authentication required"},
          "500": {"description": "Server error"}
        }
      }
    },
    "/rpc/mail": {
      "post": {
        "operationId": "mailRpc",
        "summary": "Advanced mail operations",
        "description": "Low-level Gmail RPC. Operations: search, read, send, reply, modify. Use macros for common tasks, RPC for advanced control. Returns ALL matching results (within op limits). Attachment URLs expire 1h.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["search", "read", "send", "reply", "modify"],
                    "description": "Operation: search, read (full email), send (direct OR by draftId), reply, modify"
                  },
                  "params": {
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "Send Draft",
                        "description": "Send existing draft by ID (op=send with draftId)",
                        "required": ["draftId"],
                        "properties": {
                          "draftId": {
                            "type": "string",
                            "pattern": "^r-[0-9]+$",
                            "example": "r-70585620154190988",
                            "description": "Draft ID returned from /macros/calendar/reminderDrafts. Format: r-XXXXXXXXX (immutable draft identifier)"
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "title": "Send Direct Email",
                        "description": "Send email directly without draft (op=send with to+subject+body)",
                        "required": ["to", "subject", "body"],
                        "properties": {
                          "to": {
                            "type": "string",
                            "format": "email",
                            "example": "recipient@example.com",
                            "description": "Recipient email address"
                          },
                          "subject": {
                            "type": "string",
                            "maxLength": 255,
                            "example": "Meeting tomorrow",
                            "description": "Email subject line"
                          },
                          "body": {
                            "type": "string",
                            "maxLength": 10000,
                            "example": "Hi, reminder about meeting at 7am",
                            "description": "Email body (plain text)"
                          },
                          "cc": {
                            "type": "string",
                            "description": "CC recipients (comma-separated, optional)"
                          },
                          "bcc": {
                            "type": "string",
                            "description": "BCC recipients (comma-separated, optional)"
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "title": "Search",
                        "description": "Search emails (op=search)",
                        "required": ["query"],
                        "properties": {
                          "query": {
                            "type": "string",
                            "description": "Gmail search query (from:, to:, subject:, has:attachment, etc.)"
                          },
                          "maxResults": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100
                          }
                        },
                        "additionalProperties": false
                      }
                    ],
                    "description": "Parameters depend on op value. Use oneOf validation to understand structure."
                  }
                }
              },
              "examples": {
                "searchEmails": {
                  "summary": "Search with Gmail query",
                  "value": {
                    "op": "search",
                    "params": {
                      "query": "from:john@example.com subject:meeting",
                      "maxResults": 100
                    }
                  }
                },
                "sendDirectEmail": {
                  "summary": "Send email directly (FIXED: All fields required in params)",
                  "value": {
                    "op": "send",
                    "params": {
                      "to": "recipient@example.com",
                      "subject": "Meeting tomorrow",
                      "body": "Hi, reminder about meeting at 7am"
                    }
                  }
                },
                "sendDraft": {
                  "summary": "Send existing draft by ID",
                  "value": {
                    "op": "send",
                    "params": {
                      "draftId": "18abc123def456"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed"
          },
          "400": {
            "description": "Invalid request format - detailed error with expected format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" },
                    "message": { "type": "string" },
                    "code": { "type": "string" },
                    "details": { "type": "string", "description": "Specific format requirements" },
                    "option1": { "type": "object" },
                    "option2": { "type": "object" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/calendar": {
      "post": {
        "operationId": "calendarRpc",
        "summary": "Advanced calendar operations",
        "description": "Low-level calendar RPC. Operations: list, get, create, update, delete, checkConflicts. Use macros for schedule/plan, RPC for advanced CRUD. Always include eventId for update/delete.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["list", "get", "create", "update", "delete", "checkConflicts"],
                    "description": "Operation type. CRITICAL for update: must include eventId and updates fields with proper start/end structure."
                  },
                  "params": {
                    "type": "object",
                    "description": "FIXED: Operation parameters. CRITICAL for update: eventId (required) + updates object with start/end as objects containing {dateTime, timeZone}.",
                    "properties": {
                      "eventId": {
                        "type": "string",
                        "description": "Event ID (REQUIRED for: get, update, delete, checkConflicts). Get from list or previous response."
                      },
                      "updates": {
                        "type": "object",
                        "description": "Fields to update (for op=update). Can include: start, end, summary, description, attendees, location, reminders. CRITICAL: start and end must be objects with {dateTime, timeZone}.",
                        "properties": {
                          "start": {
                            "type": "object",
                            "description": "FIXED: start is an OBJECT with required fields dateTime and timeZone",
                            "required": ["dateTime", "timeZone"],
                            "properties": {
                              "dateTime": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-10-21T15:00:00",
                                "description": "ISO 8601 datetime (without +HH:MM in string, that's in timeZone)"
                              },
                              "timeZone": {
                                "type": "string",
                                "example": "Europe/Prague",
                                "description": "REQUIRED: Timezone identifier. Use 'Europe/Prague' or valid IANA timezone."
                              }
                            }
                          },
                          "end": {
                            "type": "object",
                            "description": "FIXED: end is an OBJECT with required fields dateTime and timeZone",
                            "required": ["dateTime", "timeZone"],
                            "properties": {
                              "dateTime": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-10-21T16:00:00"
                              },
                              "timeZone": {
                                "type": "string",
                                "example": "Europe/Prague"
                              }
                            }
                          },
                          "summary": { "type": "string" },
                          "description": { "type": "string" },
                          "location": { "type": "string" },
                          "attendees": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "email": { "type": "string", "format": "email" }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "listEvents": {
                  "summary": "List ALL events in date range",
                  "value": {
                    "op": "list",
                    "params": {
                      "timeMin": "2025-10-20T00:00:00Z",
                      "timeMax": "2025-10-27T23:59:59Z"
                    }
                  }
                },
                "updateEventTime": {
                  "summary": "Reschedule event (FIXED: Proper structure with {dateTime, timeZone})",
                  "value": {
                    "op": "update",
                    "params": {
                      "eventId": "uemjv6bneskjfej5t9onrlikq0",
                      "updates": {
                        "start": {
                          "dateTime": "2025-10-21T15:00:00",
                          "timeZone": "Europe/Prague"
                        },
                        "end": {
                          "dateTime": "2025-10-21T16:00:00",
                          "timeZone": "Europe/Prague"
                        },
                        "attendees": [
                          { "email": "user@example.com" }
                        ]
                      }
                    }
                  }
                },
                "checkConflicts": {
                  "summary": "Check for conflicts in time slot",
                  "value": {
                    "op": "checkConflicts",
                    "params": {
                      "start": "2025-10-21T07:00:00Z",
                      "end": "2025-10-21T08:00:00Z"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed"
          },
          "400": {
            "description": "Invalid request format - detailed error with expected structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" },
                    "message": { "type": "string" },
                    "code": { "type": "string" },
                    "details": { "type": "string" },
                    "expectedFormat": { "type": "object" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/tasks": {
      "post": {
        "operationId": "tasksRpc",
        "summary": "Advanced tasks operations",
        "description": "Low-level tasks RPC. Operations: list, get, create, update, delete, complete. Use /macros/tasks/overview for grouped views. RPC returns ALL tasks (no grouping). Use for batch ops.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["list", "get", "create", "update", "delete", "complete"],
                    "description": "Operation: list (all), get (by ID), create, update, delete, complete (mark done)"
                  },
                  "params": {
                    "type": "object",
                    "description": "Op params. list: {}. get: {taskListId, taskId}. create: {title, due, notes}. update: {taskListId, taskId, updates}. delete: {taskListId, taskId}. complete: {taskListId, taskId}."
                  }
                }
              },
              "examples": {
                "createTask": {
                  "summary": "Create new task",
                  "value": {
                    "op": "create",
                    "params": {
                      "title": "Review proposal",
                      "due": "2025-10-25T12:00:00Z"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed"
          }
        }
      }
    }
  }
}
