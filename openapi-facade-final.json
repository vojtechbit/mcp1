{
  "openapi": "3.1.0",
  "info": {
    "title": "Alfred Assistant API",
    "version": "2.1.0",
    "description": "Complete API for managing Gmail, Google Calendar, Contacts, and Tasks. High-level macros for common workflows and low-level RPC for advanced control. All times use Europe/Prague timezone."
  },
  "servers": [
    {
      "url": "https://mcp1-oauth-server.onrender.com/api",
      "description": "Production server"
    }
  ],
  "paths": {
    "/macros/inbox/overview": {
      "post": {
        "operationId": "macroInboxOverview",
        "summary": "Get lightweight inbox overview",
        "description": "Quick inbox digest with sender, subject, timestamp, and Gmail snippet preview. Perfect for 'Who emailed me today?' Returns ALL emails in timeRange (up to 200).",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Returns ALL emails in specified timeRange by default (up to 200 max). Includes Gmail snippet preview text for quick scanning. Use filters to narrow results. If user asks 'Who emailed me today?', this returns complete list of today's emails, not just a subset. Only use maxItems if user explicitly wants to limit results (e.g., 'show me last 10 emails').",
                "properties": {
                  "timeRange": {
                    "type": "object",
                    "description": "Time window for emails. Use 'relative' property for natural periods like 'today', 'yesterday', 'thisWeek'. Automatically converts to Europe/Prague timezone. When user asks about 'today', use {relative:'today'} to get ALL today's emails.",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": [
                          "lastHour",
                          "last3h",
                          "last24h",
                          "today",
                          "tomorrow",
                          "yesterday",
                          "thisWeek",
                          "last7d"
                        ],
                        "description": "Natural time window: 'today'=ALL today's emails (00:00-23:59 Europe/Prague), 'thisWeek'=ALL this week Mon-Sun, 'last24h'=last 24 hours, 'yesterday'=ALL yesterday's emails, 'last7d'=past 7 days. Default behavior: returns ALL emails in period, not subset."
                      }
                    }
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 200,
                    "default": 50,
                    "description": "Maximum emails to return (1-200). Default 50 matches backend default and balances performance with coverage. Lower it only when the user explicitly asks for a smaller sample (e.g. \"last 5 emails\"). When more exist the response sets subset=true."
                  },
                  "filters": {
                    "type": "object",
                    "description": "Optional filters to narrow results. Use when user specifies sender, attachment requirements, or inbox category. Example: 'emails from John' -> {from:'john'}, 'emails with attachments' -> {hasAttachment:true}, 'show Primary inbox' -> {category:'primary'}.",
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Filter by sender email or name. Partial match, case-insensitive. Use when user asks about emails from specific person/company. Examples: 'john@example.com', 'john', 'acme corp'. Empty/omit for all senders."
                      },
                      "hasAttachment": {
                        "type": "boolean",
                        "description": "If true, ONLY emails with attachments. Use when user asks 'emails with files' or 'show me emails with attachments'. Omit (don't set false) for all emails regardless of attachments."
                      },
                      "category": {
                        "type": "string",
                        "enum": [
                          "primary",
                          "work",
                          "promotions",
                          "social",
                          "updates",
                          "forums"
                        ],
                        "description": "Limit overview results to a Gmail category/label. Examples: {category:\"primary\"}, {category:\"promotions\"}, {category:\"social\"}. Maps to Gmail CATEGORY_* labels. Omit this field to inspect all categories."
                      },
                      "labelIds": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Advanced filtering using raw Gmail label IDs (e.g., 'Label_123'). Useful for custom labels or saved Gmail filters."
                      }
                    }
                  }
                }
              },
              "examples": {
                "todaysEmails": {
                  "summary": "ALL today's emails (typical query)",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    }
                  }
                },
                "fromSpecificSender": {
                  "summary": "ALL emails from John today",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "filters": {
                      "from": "john"
                    }
                  }
                },
                "limitedResults": {
                  "summary": "Last 10 emails only (user explicitly wants limit)",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "maxItems": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved email overview",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "Array of email cards. Contains ALL emails in timeRange (up to maxItems limit). If user asked 'emails today', this is complete list of today's emails. Each has messageId for reading full content with /macros/email/quickRead.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "description": "Gmail message ID. Use with /macros/email/quickRead to read full email body and attachments."
                          },
                          "senderName": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Sender display name (e.g., 'John Smith'). Null when not available."
                          },
                          "senderAddress": {
                            "type": "string",
                            "description": "Sender email (e.g., 'john@example.com'). Always present."
                          },
                          "subject": {
                            "type": "string",
                            "description": "Email subject. Empty string if no subject."
                          },
                          "receivedAt": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "ISO 8601 timestamp when received (UTC), e.g., '2025-10-19T14:30:00Z'. Null when unavailable."
                          },
                          "inboxCategory": {
                            "type": "string",
                            "description": "Auto-category: 'primary'(important), 'work', 'alerts', 'newsletters', 'social', 'updates', 'forums', 'other'"
                          },
                          "snippet": {
                            "type": "string",
                            "description": "Gmail preview text (max ~160 chars). Always included in overview responses for quick context."
                          },
                          "readState": {
                            "type": "object",
                            "description": "Derived read status based on Gmail labels.",
                            "properties": {
                              "isUnread": {
                                "type": "boolean",
                                "description": "true when the email is still unread."
                              },
                              "isRead": {
                                "type": "boolean",
                                "description": "true when the email has been read."
                              }
                            },
                            "required": [
                              "isUnread",
                              "isRead"
                            ],
                            "additionalProperties": false
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "If true, MORE emails exist beyond this response (exceeded maxItems limit). User should know there are additional emails. If false, this is COMPLETE list of all matching emails."
                    },
                    "nextPageToken": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Token for next page. Null if subset=false (all results included). If subset=true, inform user there are more emails and offer to fetch them."
                    },
                    "labelResolution": {
                      "type": "object",
                      "description": "Metadata about how label strings were resolved into Gmail label IDs when filters.labelIds was provided. Absent when no label resolution was needed.",
                      "properties": {
                        "requested": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Original label strings provided in filters.labelIds."
                        },
                        "appliedLabels": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "type": { "type": "string" },
                              "color": { "type": ["string", "null"] }
                            }
                          },
                          "description": "Label objects that were confidently matched (subset of full label list)."
                        },
                        "appliedLabelIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Gmail label IDs applied to the query after resolution."
                        },
                        "queryAppliedLabelIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Label IDs actually used for this specific query (identical to appliedLabelIds unless resolution was skipped)."
                        },
                        "requestedCount": {
                          "type": "integer",
                          "description": "How many label strings were requested in total."
                        },
                        "requiresConfirmation": {
                          "type": "boolean",
                          "description": "true when at least one label needs clarification (ambiguous or unmatched)."
                        },
                        "querySkipped": {
                          "type": "boolean",
                          "description": "true when no label was applied and the query was intentionally skipped to avoid returning unrelated emails."
                        },
                        "resolved": {
                          "type": "array",
                          "description": "Resolved label matches with confidence scores.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "input": { "type": "string" },
                              "label": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "type": { "type": "string" },
                                  "color": { "type": ["string", "null"] }
                                }
                              },
                              "confidence": { "type": "number" },
                              "reason": { "type": "string" }
                            },
                            "required": ["input", "label", "confidence", "reason"]
                          }
                        },
                        "ambiguous": {
                          "type": "array",
                          "description": "Inputs that need clarification along with candidate labels.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "input": { "type": "string" },
                              "options": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "string" },
                                        "name": { "type": "string" },
                                        "type": { "type": "string" },
                                        "color": { "type": ["string", "null"] }
                                      }
                                    },
                                    "confidence": { "type": "number" },
                                    "reason": { "type": "string" }
                                  },
                                  "required": ["label", "confidence", "reason"]
                                }
                              }
                            },
                            "required": ["input", "options"]
                          }
                        },
                        "unmatched": {
                          "type": "array",
                          "description": "Inputs that could not be matched to any label.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "input": { "type": "string" },
                              "suggestions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "string" },
                                        "name": { "type": "string" },
                                        "type": { "type": "string" },
                                        "color": { "type": ["string", "null"] }
                                      }
                                    },
                                    "confidence": { "type": "number" },
                                    "reason": { "type": "string" }
                                  },
                                  "required": ["label", "confidence", "reason"]
                                }
                              }
                            },
                            "required": ["input", "suggestions"]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/inbox/snippets": {
      "post": {
        "operationId": "macroInboxSnippets",
        "summary": "Get inbox with email body snippets",
        "description": "Emails WITH body preview (200-300 chars) and attachment URLs. Perfect for 'What did John say?' Returns ALL matching emails by default (up to 50). Attachment URLs expire 1 hour. For full bodies, use /macros/email/quickRead.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Returns ALL emails in timeRange with body snippets (up to 50 max due to snippet processing). Default behavior: complete results for user's query, not subset. Includes signed attachment download URLs (expire 1h). Lower max than overview (50 vs 200) due to body snippet processing cost.",
                "properties": {
                  "timeRange": {
                    "type": "object",
                    "description": "Time window for emails. When user asks 'what did John say today?', use {relative:'today'} to get ALL today's emails with body previews.",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": [
                          "lastHour",
                          "last3h",
                          "last24h",
                          "today",
                          "yesterday",
                          "thisWeek",
                          "last7d"
                        ],
                        "description": "Natural time periods. 'today'=ALL today's emails with snippets, 'thisWeek'=ALL this week's emails. Default returns complete set, not partial."
                      }
                    }
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 50,
                    "description": "Max emails with snippets. Default 50 (max allowed) ensures complete results. Lower max than overview due to snippet processing. ONLY reduce if user explicitly wants fewer (e.g., 'show last 5 emails with preview'). When user asks 'what are today's emails about?', use default to get ALL."
                  },
                  "includeAttachments": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true (default), includes signed download URLs for attachments (expire 1h). Set false only if attachments explicitly not needed for faster response. Most queries should use default true."
                  },
                  "filters": {
                    "type": "object",
                    "description": "Optional filters. Use when user specifies sender or wants only emails with attachments.",
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Filter by sender. Use when user asks about specific person. Examples: 'john@example.com', 'john', 'acme'. Partial match."
                      },
                      "hasAttachment": {
                        "type": "boolean",
                        "description": "If true, ONLY emails with attachments. Use for 'show emails with files' queries. Omit for all emails."
                      }
                    }
                  }
                }
              },
              "examples": {
                "todayWithSnippets": {
                  "summary": "ALL today's emails with body previews",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    }
                  }
                },
                "recentFromSender": {
                  "summary": "ALL recent emails from John with previews",
                  "value": {
                    "timeRange": {
                      "relative": "last24h"
                    },
                    "filters": {
                      "from": "john"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved emails with snippets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "ALL emails in timeRange with body snippets (up to maxItems). If user asked about today's emails, this is complete set with previews.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "description": "Gmail message ID for reading full email"
                          },
                          "senderName": {
                            "type": "string"
                          },
                          "senderAddress": {
                            "type": "string"
                          },
                          "subject": {
                            "type": "string"
                          },
                          "receivedAt": {
                            "type": "string"
                          },
                          "snippet": {
                            "type": "string",
                            "description": "First 200-300 chars of body (plain text, HTML stripped). Enough to understand email content without reading full message."
                          },
                          "attachmentUrls": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Signed download URLs for attachments (expire 1h). Empty array if no attachments. Max 50 per email."
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "If true, more emails exist beyond limit. Inform user there are additional emails. If false, this is COMPLETE set."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "Token for next page. Null when subset=false (all snippets included)."
                    },
                    "labelResolution": {
                      "type": "object",
                      "description": "Same structure as /macros/inbox/overview labelResolution. Present when label name fuzzy-matching ran.",
                      "properties": {
                        "requested": { "type": "array", "items": { "type": "string" } },
                        "appliedLabels": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "type": { "type": "string" },
                              "color": { "type": ["string", "null"] }
                            }
                          }
                        },
                        "appliedLabelIds": { "type": "array", "items": { "type": "string" } },
                        "queryAppliedLabelIds": { "type": "array", "items": { "type": "string" } },
                        "requestedCount": { "type": "integer" },
                        "requiresConfirmation": { "type": "boolean" },
                        "querySkipped": { "type": "boolean" },
                        "resolved": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "input": { "type": "string" },
                              "label": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" },
                                  "type": { "type": "string" },
                                  "color": { "type": ["string", "null"] }
                                }
                              },
                              "confidence": { "type": "number" },
                              "reason": { "type": "string" }
                            }
                          }
                        },
                        "ambiguous": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "input": { "type": "string" },
                              "options": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "string" },
                                        "name": { "type": "string" },
                                        "type": { "type": "string" },
                                        "color": { "type": ["string", "null"] }
                                      }
                                    },
                                    "confidence": { "type": "number" },
                                    "reason": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "unmatched": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "input": { "type": "string" },
                              "suggestions": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "label": {
                                      "type": "object",
                                      "properties": {
                                        "id": { "type": "string" },
                                        "name": { "type": "string" },
                                        "type": { "type": "string" },
                                        "color": { "type": ["string", "null"] }
                                      }
                                    },
                                    "confidence": { "type": "number" },
                                    "reason": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/inbox/userunanswered": {
      "post": {
        "operationId": "macroInboxUserUnanswered",
        "summary": "Find conversations awaiting your reply",
        "description": "Use this macro when you need a structured view of inbox threads where someone else replied last and you may owe a follow-up — for example confirming showings, responding to offers, or checking on open service requests. By default it scans today's Primary inbox, surfaces unread (never opened) and read (seen but still awaiting action) buckets, and includes guidance for working with the recommended 'nevyřízeno' follow-up label plus the internal 'meta_seen' tracker so conversations are not shown twice.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Adjust includeUnread/includeRead to control which buckets appear. Default strictNoReply=true limits the report to threads without any reply from you; set false if the user wants to review conversations they have replied to before but where the other side has the latest word. Unless overridden the macro scans today's Primary inbox only (primaryOnly=true, implicit timeRange=today).",
                "properties": {
                  "includeUnread": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true (default) include unread conversations (latest message unread)."
                  },
                  "includeRead": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true (default) include conversations you already opened but never answered."
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 20,
                    "description": "Maximum threads to return per bucket (unread/read). Increase if user wants a longer watchlist."
                  },
                  "timeRange": {
                    "type": "object",
                    "description": "Optional Gmail time filter. Use relative keywords for quick ranges (today, last7d, etc.).",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": [
                          "lastHour",
                          "last3h",
                          "last24h",
                          "today",
                          "yesterday",
                          "thisWeek",
                          "last7d"
                        ],
                        "description": "Relative window. Example: {relative:'last24h'} to focus on the last day."
                      },
                      "start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Explicit ISO8601 start boundary. Converted to Gmail 'after:' unix timestamp."
                      },
                      "end": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Explicit ISO8601 end boundary. Converted to Gmail 'before:' unix timestamp."
                      }
                    }
                  },
                  "strictNoReply": {
                    "type": "boolean",
                    "default": true,
                    "description": "true (default)=only threads where you NEVER replied. false=include threads where you replied in the past but the latest message still awaits your answer."
                  },
                  "primaryOnly": {
                    "type": "boolean",
                    "default": true,
                    "description": "true (default)=limit to category:Primary. Set false to include all inbox categories."
                  },
                  "unreadPageToken": {
                    "type": "string",
                    "description": "Pagination token for unread bucket. Pass the previous response's unread.nextPageToken to continue scanning newer results."
                  },
                  "readPageToken": {
                    "type": "string",
                    "description": "Pagination token for read bucket."
                  },
                  "labelName": {
                    "type": "string",
                    "default": "nevyřízeno",
                    "description": "Preferred label name GPT should suggest for follow-ups. Defaults to 'nevyřízeno'."
                  },
                  "labelColor": {
                    "type": "string",
                    "description": "Optional hex color (e.g. '#d93025') to suggest when creating the follow-up label."
                  },
                  "query": {
                    "type": "string",
                    "description": "Extra Gmail search terms (e.g., 'from:makler@firma.cz')."
                  }
                }
              },
              "examples": {
                "defaultWatch": {
                  "summary": "Default follow-up watchlist",
                  "value": {
                    "strictNoReply": true
                  }
                },
                "includeReadOnly": {
                  "summary": "Only show read-but-unanswered threads from last 7 days",
                  "value": {
                    "includeUnread": false,
                    "includeRead": true,
                    "timeRange": {
                      "relative": "last7d"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully identified conversations awaiting reply",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": {
                      "type": "object",
                      "description": "Top-level counters and diagnostics for the current run.",
                      "properties": {
                        "totalAwaiting": { "type": "integer" },
                        "unreadCount": { "type": "integer" },
                        "readCount": { "type": "integer" },
                        "strictMode": { "type": "boolean" },
                        "timeRangeApplied": { "type": "boolean", "description": "true when any time filter (including the default 'today') was applied." },
                        "timeRangeSource": { "type": ["string", "null"], "description": "'default_today' when the macro auto-limited to today; otherwise null or custom hint." },
                        "timeWindow": {
                          "type": ["object", "null"],
                          "description": "Resolved time window expressed in Europe/Prague timezone.",
                          "properties": {
                            "start": { "type": ["string", "null"], "format": "date-time" },
                            "end": { "type": ["string", "null"], "format": "date-time" },
                            "timezone": { "type": "string" }
                          }
                        },
                        "primaryOnly": { "type": "boolean", "description": "true when only category:Primary was scanned." },
                        "scannedMessages": { "type": "integer", "description": "Raw Gmail messages inspected to build the list." },
                        "overflowCount": { "type": "integer", "description": "Threads skipped because maxItems limit was reached." },
                        "strictFilteredCount": { "type": "integer", "description": "Threads skipped due to strictNoReply=true (already replied before)." },
                        "labelAlreadyApplied": { "type": "integer", "description": "How many returned threads already have the suggested label." },
                        "missingLabel": { "type": "boolean", "description": "true if the suggested label does not yet exist in Gmail." },
                        "trackingLabelAlreadyApplied": { "type": "integer", "description": "How many returned threads already have the internal tracking label." },
                        "trackingLabelMissing": { "type": "boolean", "description": "true if the internal meta_seen label does not exist in Gmail." },
                        "trackingLabelSkipped": { "type": "integer", "description": "Threads skipped because meta_seen was already applied." }
                      }
                    },
                    "unread": {
                      "$ref": "#/components/schemas/UnansweredBucket"
                    },
                    "read": {
                      "$ref": "#/components/schemas/UnansweredBucket"
                    },
                    "labelRecommendation": {
                      "type": "object",
                      "description": "Suggested label metadata to help GPT offer follow-up tagging (user-facing 'nevyřízeno').",
                      "properties": {
                        "suggestedName": { "type": "string" },
                        "suggestedColor": { "type": "string" },
                        "textColor": { "type": "string" },
                        "existingLabel": {
                          "type": ["object", "null"],
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "color": { "type": ["string", "null"] }
                          }
                        },
                        "canCreate": { "type": "boolean" },
                        "createRequest": {
                          "type": ["object", "null"],
                          "description": "Pre-filled RPC payload GPT can send to create the label via /rpc/mail (op=labels, create)."
                        },
                        "applyRequestTemplate": {
                          "type": ["object", "null"],
                          "description": "Template RPC payload for applying the label (messageId must be filled before calling /rpc/mail)."
                        },
                        "missingLabel": {
                          "type": "boolean",
                          "description": "true if the suggested label does not yet exist in Gmail."
                        }
                      }
                    }
                    ,
                    "trackingLabel": {
                      "type": "object",
                      "description": "Internal tracking label ('meta_seen') used so the macro does not return the same thread twice.",
                      "properties": {
                        "suggestedName": { "type": "string" },
                        "suggestedColor": { "type": "string" },
                        "textColor": { "type": "string" },
                        "existingLabel": {
                          "type": ["object", "null"],
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "color": { "type": ["string", "null"] }
                          }
                        },
                        "canCreate": { "type": "boolean" },
                        "createRequest": {
                          "type": ["object", "null"],
                          "description": "Pre-filled RPC payload GPT can send to create the meta_seen label via /rpc/mail (op=labels, create)."
                        },
                        "applyRequestTemplate": {
                          "type": ["object", "null"],
                          "description": "Template RPC payload for applying the tracking label. Normally used together with labelRecommendation when tagging messages."
                        },
                        "role": { "type": ["string", "null"], "description": "Constant 'watchlist_tracking'." },
                        "skipReason": { "type": ["string", "null"], "description": "Diagnostic key for skippedReasons (e.g., 'trackingLabelPresent')." }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/email/quickRead": {
      "post": {
        "operationId": "macroEmailQuickRead",
        "summary": "Read full email bodies",
        "description": "Fetch complete email content with full body and attachments. Provide either specific IDs or Gmail search query. Format: snippet/minimal/full. Default reads ALL matching emails (up to 50). Use for 'Read email from John'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Read emails by ID or search query. Must provide EITHER 'ids' OR 'searchQuery'. Default format 'minimal' (5KB) balances speed and completeness. Returns ALL matching emails up to 50 max. When user says 'read emails from John about project', this reads ALL matching emails, not subset.",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 50,
                    "description": "Array of Gmail message IDs (alternative to searchQuery)"
                  },
                  "searchQuery": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Gmail search query (alternative to ids)"
                  },
                  "format": {
                    "type": "string",
                    "enum": [
                      "snippet",
                      "minimal",
                      "metadata",
                      "full"
                    ],
                    "default": "minimal",
                    "description": "Body format: 'snippet'=300 chars, 'minimal'=5KB (recommended), 'metadata'=headers + metadata only, 'full'=complete."
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Read by IDs",
                    "required": [
                      "ids"
                    ],
                    "properties": {
                      "ids": {
                        "type": "array"
                      },
                      "format": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Read by search query",
                    "required": [
                      "searchQuery"
                    ],
                    "properties": {
                      "searchQuery": {
                        "type": "string"
                      },
                      "format": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "readByIds": {
                  "summary": "Read 2 specific emails by ID",
                  "value": {
                    "ids": [
                      "18abc123def456",
                      "18abc789xyz012"
                    ],
                    "format": "minimal"
                  }
                },
                "searchAndRead": {
                  "summary": "Find and read ALL John's project emails",
                  "value": {
                    "searchQuery": "from:john@example.com subject:project",
                    "format": "minimal"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved email(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response mode: 'single' if 1 email, 'batch' if multiple. Contains complete email content for ALL requested/matching emails.",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "enum": [
                        "single",
                        "batch"
                      ],
                      "description": "'single'=1 email (use 'item'), 'batch'=multiple emails (use 'items' array)"
                    },
                    "item": {
                      "$ref": "#/components/schemas/MacroEmailQuickReadItem"
                    },
                    "items": {
                      "type": "array",
                      "description": "Array of emails (when mode='batch'). Contains ALL requested/matching emails.",
                      "items": {
                        "$ref": "#/components/schemas/MacroEmailQuickReadItem"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/plan": {
      "post": {
        "operationId": "macroCalendarPlan",
        "summary": "Get daily or weekly calendar schedule",
        "description": "Calendar events for day or week with status (past/ongoing/upcoming). Perfect for 'What's my schedule today?' Returns ALL events by default (up to 50). Scope: daily=single day, weekly=Mon-Sun. Europe/Prague timezone.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "scope",
                  "date"
                ],
                "description": "Returns ALL events in specified scope by default (up to 50 max). When user asks 'what's my schedule today?', returns complete daily schedule, not subset. Status computed relative to current time. Use includePast=false (default) to hide finished events. Defaults to primary calendar unless calendarId provided.",
                "properties": {
                  "scope": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly"
                    ],
                    "description": "'daily'=ALL events in single day, 'weekly'=ALL events Mon-Sun of week. For 'schedule today' use daily. For 'this week' use weekly. Returns complete schedule, not partial."
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Anchor date (YYYY-MM-DD). Daily: this exact day. Weekly: Mon-Sun week containing this date. Examples: '2025-10-19' (today), '2025-10-26' (next week). Europe/Prague timezone."
                  },
                  "includePast": {
                    "type": "boolean",
                    "default": false,
                    "description": "If false (default), ONLY current and future events (status='ongoing' or 'upcoming'). If true, includes ALL events including past (status='past'). Use false for 'what's next?', true for 'show all today's meetings'."
                  },
                  "pastTreatment": {
                    "type": "string",
                    "enum": [
                      "minimal",
                      "full"
                    ],
                    "default": "minimal",
                    "description": "How much detail to keep for past events when includePast=true. 'minimal' (default) trims map/attendees to reduce noise; 'full' keeps complete event context."
                  },
                  "calendarId": {
                    "type": "string",
                    "default": "primary",
                    "description": "Optional calendar identifier. Defaults to 'primary' when omitted. Use only when the user specifies a different calendar or when multiple calendars exist."
                  }
                }
              },
              "examples": {
                "todaySchedule": {
                  "summary": "ALL upcoming meetings today (typical query)",
                  "value": {
                    "scope": "daily",
                    "date": "2025-10-19",
                    "includePast": false
                  }
                },
                "fullDayIncludingPast": {
                  "summary": "ALL today's meetings (past + current + future)",
                  "value": {
                    "scope": "daily",
                    "date": "2025-10-19",
                    "includePast": true
                  }
                },
                "thisWeek": {
                  "summary": "ALL this week's upcoming meetings",
                  "value": {
                    "scope": "weekly",
                    "date": "2025-10-19"
                  }
                },
                "teamCalendar": {
                  "summary": "Schedule for shared team calendar (non-primary)",
                  "value": {
                    "scope": "weekly",
                    "date": "2025-10-19",
                    "calendarId": "team@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved calendar schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "range": {
                      "type": "object",
                      "description": "Time range covered",
                      "properties": {
                        "start": {
                          "type": "string",
                          "description": "Range start (ISO 8601). Daily: 00:00 of date. Weekly: Monday 00:00."
                        },
                        "end": {
                          "type": "string",
                          "description": "Range end (ISO 8601). Daily: 23:59 of date. Weekly: Sunday 23:59."
                        },
                        "tz": {
                          "type": "string",
                          "description": "Always Europe/Prague"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "description": "ALL events in range (up to 50), sorted by start time. When pastTreatment='minimal', past events omit location/map/attendees to reduce noise.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "eventId": {
                            "type": "string",
                            "description": "Google Calendar event ID. Use for RPC update/delete."
                          },
                          "title": {
                            "type": "string"
                          },
                          "start": {
                            "type": "string",
                            "description": "Start time (ISO 8601)"
                          },
                          "end": {
                            "type": "string",
                            "description": "End time (ISO 8601)"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "past",
                              "ongoing",
                              "upcoming"
                            ],
                            "description": "Computed status: 'past'=ended, 'ongoing'=happening now, 'upcoming'=not started. Relative to current time."
                          },
                          "locationText": {
                            "type": "string",
                            "description": "Location: room, address, or video link"
                          },
                          "mapUrl": {
                            "type": "string",
                            "nullable": true,
                            "description": "Google Maps search URL generated when a location is present. Null if no location."
                          },
                          "attendees": {
                            "type": "array",
                            "description": "Meeting attendees",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Display name if known"
                                },
                                "email": {
                                  "type": "string",
                                  "description": "Attendee email address"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/schedule": {
      "post": {
        "operationId": "macroCalendarSchedule",
        "summary": "Create new calendar event (create-only flow)",
        "description": "CREATE new events only; modify via /rpc/calendar op:update. Accept fixed slot or proposals[] (first free). If enrichFromContacts='ask', returns confirmToken for /macros/confirm. Auto adds Google Meet or Zoom placeholder. Limit 20 attendees, Europe/Prague timezone.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "when"
                ],
                "description": "Create calendar event with attendees, location, notes, optional contact enrichment, conference links, reminders. Sends calendar invites to all attendees. Max 20 attendees, max 5 reminders. Times in ISO 8601 format (Europe/Prague). Defaults to primary calendar unless calendarId is provided.",
                "properties": {
                  "title": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event title. Be descriptive. Examples: 'Team Standup', 'Client Meeting - Acme Corp', 'Doctor Appointment'."
                  },
                  "when": {
                    "type": "object",
                    "description": "Event timing. Provide either fixed.start/end for a specific slot or proposals[] for alternatives (macro checks conflicts in order and picks the first free slot).",
                    "properties": {
                      "fixed": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Start time (ISO 8601). Example: '2025-10-20T14:00:00' for Oct 20, 2:00 PM Europe/Prague."
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "description": "End time (ISO 8601). Must be after start. Example: '2025-10-20T15:00:00' for 1-hour meeting."
                          }
                        },
                        "required": [
                          "start",
                          "end"
                        ]
                      },
                      "proposals": {
                        "type": "array",
                        "description": "Alternative slots to try (conflict-checked in order). If all proposals conflict, the macro returns HTTP 409 with details.",
                        "minItems": 1,
                        "maxItems": 10,
                        "items": {
                          "type": "object",
                          "required": [
                            "start",
                            "end"
                          ],
                          "properties": {
                            "start": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Proposed start time (ISO 8601)."
                            },
                            "end": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Proposed end time (ISO 8601)."
                            }
                          },
                          "additionalProperties": false
                        }
                      }
                    },
                    "additionalProperties": false,
                    "anyOf": [
                      {
                        "required": [
                          "fixed"
                        ]
                      },
                      {
                        "required": [
                          "proposals"
                        ]
                      }
                    ]
                  },
                  "calendarId": {
                    "type": "string",
                    "default": "primary",
                    "description": "Optional calendar identifier for the event. Defaults to 'primary'. Only include when the user specifies a different calendar or when multiple calendars are in play."
                  },
                  "attendees": {
                    "type": "array",
                    "maxItems": 20,
                    "description": "Meeting attendees (max 20). Sends calendar invites. Each needs email, name optional.",
                    "items": {
                      "type": "object",
                      "required": [
                        "email"
                      ],
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "location": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Location: room/address or video link. Examples: 'Conference Room A', '123 Main St', 'https://zoom.us/j/123'."
                  },
                  "notes": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Event description (max 2000 chars). Use for agenda, purpose, preparation instructions."
                  },
                  "conference": {
                    "type": "string",
                    "enum": [
                      "none",
                      "auto",
                      "meet",
                      "zoom"
                    ],
                    "default": "none",
                    "description": "Video link: 'none'=no video, 'meet'=Google Meet (auto-generated), 'zoom'=adds placeholder text reminding organiser to add link manually, 'auto'=currently behaves like 'none'."
                  },
                  "enrichFromContacts": {
                    "type": "string",
                    "enum": [
                      "ask",
                      "auto",
                      "off"
                    ],
                    "default": "ask",
                    "description": "Enrich attendee details from Google Contacts. 'ask'=pause and return confirmToken with suggested fields, 'auto'=auto-fill without confirmation, 'off'=skip enrichment."
                  },
                  "privacy": {
                    "type": "string",
                    "enum": [
                      "default",
                      "private",
                      "public"
                    ],
                    "description": "Visibility hint stored with pending confirmation payload (currently forwarded back untouched)."
                  },
                  "reminders": {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Reminders in minutes before event (max 5). Common: 15, 30, 60, 1440 (1 day). Can set multiple: [15,60].",
                    "items": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1440
                    }
                  }
                }
              },
              "examples": {
                "simpleFixedTime": {
                  "summary": "Simple 30min meeting",
                  "value": {
                    "title": "Team Standup",
                    "when": {
                      "fixed": {
                        "start": "2025-10-20T09:00:00",
                        "end": "2025-10-20T09:30:00"
                      }
                    },
                    "reminders": [
                      15
                    ]
                  }
                },
                "meetingWithAttendees": {
                  "summary": "Meeting with attendees + Google Meet",
                  "value": {
                    "title": "Project Review",
                    "when": {
                      "fixed": {
                        "start": "2025-10-21T14:00:00",
                        "end": "2025-10-21T15:00:00"
                      }
                    },
                    "attendees": [
                      {
                        "email": "john@example.com",
                        "name": "John Smith"
                      }
                    ],
                    "conference": "meet",
                    "reminders": [
                      15,
                      60
                    ]
                  }
                },
                "proposedSlots": {
                  "summary": "Try multiple slots and pick first without conflicts",
                  "value": {
                    "title": "Design Sync",
                    "when": {
                      "proposals": [
                        {
                          "start": "2025-10-22T09:00:00",
                          "end": "2025-10-22T09:30:00"
                        },
                        {
                          "start": "2025-10-22T10:00:00",
                          "end": "2025-10-22T10:30:00"
                        }
                      ]
                    },
                    "attendees": [
                      {
                        "email": "alex@example.com"
                      }
                    ],
                    "enrichFromContacts": "ask"
                  }
                },
                "teamCalendar": {
                  "summary": "Create event in shared team calendar",
                  "value": {
                    "title": "Team Retro",
                    "when": {
                      "fixed": {
                        "start": "2025-10-25T16:00:00",
                        "end": "2025-10-25T17:30:00"
                      }
                    },
                    "attendees": [
                      {
                        "email": "team@example.com",
                        "name": "Team Room"
                      }
                    ],
                    "calendarId": "team@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event created or pending confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "description": "Created event details. Null when confirmToken returned for enrichment.",
                      "properties": {
                        "eventId": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "start": {
                          "type": "string"
                        },
                        "end": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "description": "Always 'upcoming' immediately after creation."
                        },
                        "attendees": {
                          "type": "array",
                          "description": "Attendee list with email/name pairs.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string"
                              },
                              "name": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "confirmToken": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Present when enrichFromContacts='ask' and contact data found. Call /api/macros/confirm with this token to continue."
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Informational messages (e.g. enrichment suggestions or that auto-fill was applied)."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "All proposed time slots conflict with existing events. Response includes alternatives array.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "CONFLICT"
                      ]
                    },
                    "alternatives": {
                      "type": "array",
                      "description": "Each item details a conflicting proposal with the conflicting events.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "proposal": {
                            "type": "object"
                          },
                          "conflicts": {
                            "type": "array"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/reminderDrafts": {
      "post": {
        "operationId": "macroCalendarReminderDrafts",
        "summary": "Generate reminder email drafts for upcoming events",
        "description": "Create Gmail draft reminders for event attendees. Scopes: today (all day's events) or nextHours (next N hours). Returns draft list with generated emails ready to send. Email templates customizable. Defaults to primary calendar unless calendarId provided.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Generate reminder drafts for events. Scope: 'today'=all day's events, 'nextHours'=next N hours. Creates one draft per attendee. Templates customizable with {title}, {start}, {end}, {location}, {recipientName}.",
                "properties": {
                  "window": {
                    "type": "string",
                    "enum": [
                      "today",
                      "nextHours"
                    ],
                    "description": "Time window: 'today'=ALL events today, 'nextHours'=next N hours (requires hours param)"
                  },
                  "hours": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 24,
                    "description": "Lookahead window in hours (required when window='nextHours')"
                  },
                  "template": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Custom email template (optional)"
                  },
                  "includeLocation": {
                    "type": "boolean",
                    "default": true,
                    "description": "Include location in reminder"
                  },
                  "createDrafts": {
                    "type": "boolean",
                    "default": true,
                    "description": "Create drafts or preview only"
                  },
                  "calendarId": {
                    "type": "string",
                    "default": "primary",
                    "description": "Optional calendar identifier to scan. Defaults to 'primary'. Supply only when targeting a specific non-primary calendar."
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "title": "Generate for today",
                    "properties": {
                      "window": {
                        "type": "string"
                      },
                      "template": {
                        "type": "string"
                      },
                      "includeLocation": {
                        "type": "boolean"
                      },
                      "createDrafts": {
                        "type": "boolean"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Generate for next N hours",
                    "required": [
                      "hours"
                    ],
                    "properties": {
                      "window": {
                        "type": "string"
                      },
                      "hours": {
                        "type": "integer"
                      },
                      "template": {
                        "type": "string"
                      },
                      "includeLocation": {
                        "type": "boolean"
                      },
                      "createDrafts": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "todayReminders": {
                  "summary": "Generate reminders for ALL today's events",
                  "value": {
                    "window": "today"
                  }
                },
                "nextHoursReminders": {
                  "summary": "Generate reminders for next 4 hours only",
                  "value": {
                    "window": "nextHours",
                    "hours": 4
                  }
                },
                "customTemplate": {
                  "summary": "Use custom reminder template",
                  "value": {
                    "window": "today",
                    "template": "Hi {recipientName},\n\nDon't forget about {title}!\nWhen: {start}\nWhere: {location}\n\nLooking forward to seeing you!"
                  }
                },
                "sharedCalendar": {
                  "summary": "Reminders for shared team calendar",
                  "value": {
                    "window": "today",
                    "calendarId": "team@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated reminder drafts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "drafts": {
                      "type": "array",
                      "description": "Email drafts created (one per attendee per event). Ready to send or customize further.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "draftId": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Gmail draft ID. Use to access/modify/send via Gmail API. Null if createDrafts=false or draft creation failed."
                          },
                          "to": {
                            "type": "string",
                            "description": "Recipient email address (event attendee)"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Email subject line. Format: 'Reminder: {event title}'"
                          },
                          "preview": {
                            "type": "string",
                            "description": "First 200 chars of email body for preview"
                          },
                          "eventId": {
                            "type": "string",
                            "description": "Google Calendar event ID. Use to reference original event."
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "Always false. All matching events included (no pagination)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/listCalendars": {
      "post": {
        "operationId": "macroCalendarListCalendars",
        "summary": "List available calendars",
        "description": "Returns calendars available to the signed-in user. Use to discover non-primary calendar IDs before supplying calendarId to other macros or RPC calls.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "No parameters required.",
                "properties": {},
                "additionalProperties": false
              },
              "example": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully listed calendars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "displayName",
                      "isPrimary",
                      "accessRole"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Calendar identifier (use as calendarId in other requests)."
                      },
                      "displayName": {
                        "type": "string",
                        "description": "Calendar name as shown to the user."
                      },
                      "isPrimary": {
                        "type": "boolean",
                        "description": "True if this is the user's primary calendar."
                      },
                      "accessRole": {
                        "type": "string",
                        "description": "Access role for the signed-in user (owner, writer, reader, etc.)."
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "summary": "Primary and shared calendars",
                    "value": [
                      {
                        "id": "primary",
                        "displayName": "Osobní",
                        "isPrimary": true,
                        "accessRole": "owner"
                      },
                      {
                        "id": "team@example.com",
                        "displayName": "Team events",
                        "isPrimary": false,
                        "accessRole": "writer"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/briefings/meetingEmailsToday": {
      "post": {
        "operationId": "macroBriefingsMeetingEmailsToday",
        "summary": "Daily briefing: emails related to today's meetings",
        "description": "Generates a briefing of today's calendar events and related Gmail threads. Searches recent mail using attendee addresses and event keywords. Use optional globalKeywordHints to add user-provided phrases (e.g. project codes).",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Controls scope of the meeting-email briefing. Defaults: date=today (Europe/Prague), lookbackDays=14, calendarId='primary'.",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Target day in YYYY-MM-DD (Europe/Prague). Defaults to today's date when omitted."
                  },
                  "lookbackDays": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30,
                    "default": 14,
                    "description": "How far back to search for related emails. Default 14 days to match playbook guidance."
                  },
                  "calendarId": {
                    "type": "string",
                    "default": "primary",
                    "description": "Optional calendar identifier. Omit to use the primary calendar automatically."
                  },
                  "globalKeywordHints": {
                    "type": "array",
                    "description": "Optional list of extra phrases to include in every search (e.g. project names provided by the user). Use sparingly; backend already derives keywords from event titles, locations, and descriptions.",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 80
                    },
                    "maxItems": 10
                  }
                }
              },
              "examples": {
                "defaultToday": {
                  "summary": "Briefing for today's events with default lookback",
                  "value": {}
                },
                "specificDate": {
                  "summary": "Briefing for a specific day",
                  "value": {
                    "date": "2025-03-18"
                  }
                },
                "sharedCalendar": {
                  "summary": "Use shared calendar and add keyword hints",
                  "value": {
                    "calendarId": "team@example.com",
                    "globalKeywordHints": [
                      "Project Atlas"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated meeting-email briefing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "string",
                      "format": "date",
                      "description": "Day for which the briefing was generated (Europe/Prague)."
                    },
                    "lookbackDays": {
                      "type": "integer",
                      "description": "Lookback window actually applied."
                    },
                    "calendarId": {
                      "type": "string",
                      "description": "Calendar used for event discovery. Defaults to 'primary' when omitted in request."
                    },
                    "globalKeywordHintsUsed": {
                      "type": "array",
                      "description": "Keyword hints that influenced queries. Empty when backend relied purely on its own heuristics.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "events": {
                      "type": "array",
                      "description": "One entry per calendar event on the requested day.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "eventId": {
                            "type": "string",
                            "description": "Google Calendar event ID."
                          },
                          "title": {
                            "type": "string",
                            "description": "Event summary/title."
                          },
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Event start (ISO 8601, Europe/Prague)."
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Event end (ISO 8601, Europe/Prague)."
                          },
                          "attendeesUsed": {
                            "type": "array",
                            "description": "Email addresses considered when building attendee-based queries.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "keywordSources": {
                            "type": "object",
                            "description": "Breakdown of keywords auto-derived by backend (title, location, description) and any applied hints.",
                            "properties": {
                              "auto": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Keywords extracted from event metadata."
                              },
                              "hints": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Keyword hints that matched this event."
                              }
                            }
                          },
                          "searches": {
                            "type": "array",
                            "description": "Queries executed for this event (attendee, subject variants, keyword combinations).",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Search bucket identifier (e.g. 'attendee', 'titleKeyword', 'hint')."
                                },
                                "query": {
                                  "type": "string",
                                  "description": "Actual Gmail query string executed."
                                },
                                "matchedCount": {
                                  "type": "integer",
                                  "description": "How many unique threads matched this query."
                                }
                              }
                            }
                          },
                          "relevantEmails": {
                            "type": "array",
                            "description": "Emails confirmed to relate to the meeting after full-text inspection.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "threadId": {
                                  "type": "string",
                                  "description": "Gmail thread identifier."
                                },
                                "messageId": {
                                  "type": "string",
                                  "description": "Specific message identifier useful for follow-up actions."
                                },
                                "sentAt": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp the email was sent (ISO 8601)."
                                },
                                "from": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "subject": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "Why backend marked the email as relevant (e.g. attendee match, agenda keywords)."
                                },
                                "links": {
                                  "type": "object",
                                  "properties": {
                                    "thread": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "message": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "description": "Direct Gmail links for convenience. May be null when not available."
                                }
                              }
                            }
                          },
                          "possibleMatches": {
                            "type": "array",
                            "description": "Emails that matched heuristics but were not confirmed as relevant.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "threadId": {
                                  "type": "string"
                                },
                                "messageId": {
                                  "type": "string"
                                },
                                "sentAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "from": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "subject": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string",
                                  "description": "Why this email was surfaced despite lacking confirmation."
                                }
                              }
                            }
                          },
                          "notes": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "description": "Optional notes about gaps (e.g. attendee had no recent emails)."
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "Indicates whether the briefing might be incomplete due to hitting search limits."
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Non-fatal issues encountered (e.g. calendar fetch failed, Gmail query truncated)."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/contacts/safeAdd": {
      "post": {
        "operationId": "macroContactsSafeAdd",
        "summary": "Bulk add contacts with safety checks",
        "description": "Bulk import 1-50 contacts with duplicate detection plus confirmation. Strategies: ask (confirm), skip, merge, keepBoth. For deep cleanup use /rpc/contacts (op:\"dedupe\") then POST /contacts/actions/bulkDelete. Field 'realestate' stores organization.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "entries"
                ],
                "description": "Bulk add 1-50 contacts with duplicate detection. Each entry needs name plus optional email/phone/realestate/notes. dedupeStrategy handles duplicates: ask (default confirmation), skip (ignore), merge (update existing), keepBoth (always insert). Use /contacts/actions/bulkDelete to remove extras.",
                "properties": {
                  "entries": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 50,
                    "description": "Contacts to add (1-50). Each: name (required), email/phone/realestate/notes (optional). Duplicate check on name/email/phone.",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "maxLength": 255,
                          "description": "Full name (required). Examples: 'John Smith', 'Jane Doe'."
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Email (optional but recommended). Used for duplicate check."
                        },
                        "phone": {
                          "type": "string",
                          "maxLength": 20,
                          "description": "Phone any format (optional). Examples: '+420 123 456 789', '555-1234'."
                        },
                        "realestate": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Company/org (optional). Note: field name is 'realestate'. Examples: 'Acme Corp', 'Self-employed'."
                        },
                        "notes": {
                          "type": "string",
                          "maxLength": 1000,
                          "description": "Notes (optional, max 1000). Example: 'Met at conference 2024'."
                        }
                      }
                    }
                  },
                  "dedupeStrategy": {
                    "type": "string",
                    "enum": [
                      "ask",
                      "keepBoth",
                      "skip",
                      "merge"
                    ],
                    "default": "ask",
                    "description": "Duplicate handling mode. 'ask' (default) returns a confirmToken for duplicates, 'keepBoth' always inserts the new contact, 'skip' ignores duplicates, 'merge' updates the best match. Prefer 'ask' for safety; 'merge' suits bulk imports."
                  }
                }
              },
              "examples": {
                "singleContact": {
                  "summary": "Add single contact (safest: asks if duplicate)",
                  "value": {
                    "entries": [
                      {
                        "name": "John Smith",
                        "email": "john@example.com",
                        "phone": "+420 123 456 789",
                        "realestate": "Acme Corp"
                      }
                    ],
                    "dedupeStrategy": "ask"
                  }
                },
                "bulkImportAutoMerge": {
                  "summary": "Import 3 contacts with auto-merge into existing",
                  "value": {
                    "entries": [
                      {
                        "name": "Jane Doe",
                        "email": "jane@company.com"
                      },
                      {
                        "name": "Bob Wilson",
                        "email": "bob@startup.io"
                      },
                      {
                        "name": "Alice Brown",
                        "phone": "+420 999 888 777"
                      }
                    ],
                    "dedupeStrategy": "merge"
                  }
                },
                "bulkImportSkip": {
                  "summary": "Import but skip any duplicates found",
                  "value": {
                    "entries": [
                      {
                        "name": "Bob Wilson",
                        "email": "bob@startup.io"
                      }
                    ],
                    "dedupeStrategy": "skip"
                  }
                },
                "bulkImportKeepBoth": {
                  "summary": "Always add new entries even if duplicates exist",
                  "value": {
                    "entries": [
                      {
                        "name": "Legacy Lead",
                        "email": "legacy@example.com"
                      }
                    ],
                    "dedupeStrategy": "keepBoth"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contacts processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "description": "Successfully created new contacts. Each item: {name, email}",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "merged": {
                      "type": "array",
                      "description": "Successfully merged into existing contacts (when strategy=merge). Each item: {merged_into (email), from (name), fields_updated (array of field names)}. Preserve existing contact data, add new fields from entry.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "merged_into": {
                            "type": "string",
                            "description": "Email of existing contact that was merged into"
                          },
                          "from": {
                            "type": "string",
                            "description": "Name of new contact that was merged"
                          },
                          "fields_updated": {
                            "type": "array",
                            "description": "Which fields were updated (phone, notes, etc)"
                          }
                        }
                      }
                    },
                    "skipped": {
                      "type": "array",
                      "description": "Entries that could not be processed. Reason: 'found duplicates' (strategy=ask or skip), 'merge failed', 'add failed'. Each item: {email, name, reason, existing (duplicate contacts if found)}.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "existing": {
                            "type": "array",
                            "description": "Existing contacts that matched (if duplicates found)"
                          }
                        }
                      }
                    },
                    "confirmToken": {
                      "type": "string",
                      "description": "Present ONLY if strategy='ask' and duplicates found. User must call /api/macros/confirm with this token and action (keepBoth/skip/merge) to proceed."
                    },
                    "warnings": {
                      "type": "array",
                      "description": "Informational messages for user (e.g., duplicate counts, reminder to confirm or to use /rpc/contacts (dedupe) + /contacts/actions/bulkDelete for cleanup)",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/tasks/overview": {
      "post": {
        "operationId": "macroTasksOverview",
        "summary": "Get tasks overview",
        "description": "Google Tasks grouped by status. Scopes: daily (today only) or weekly (this week). Returns ALL tasks in scope: today/thisWeek/overdue sections, optionally completed. Use for 'What are my tasks today?'",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "scope"
                ],
                "description": "Returns ALL tasks in specified scope grouped by due date. Daily=ALL today's tasks, weekly=ALL this week's tasks. Four sections: 'today', 'thisWeek', 'overdue', 'completed' (if includeCompleted=true). Supports filtering by project name or label IDs when user asks for a specific bucket. Complete task list, not subset.",
                "properties": {
                  "scope": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly"
                    ],
                    "description": "'daily'=ALL tasks due today (24 hours). 'weekly'=ALL tasks due this week (Mon-Sun). Complete list, not subset."
                  },
                  "includeCompleted": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, includes completed tasks in 'completed' section. If false (default), only active tasks. Use true for 'what I accomplished', false for 'what's left to do'."
                  },
                  "project": {
                    "type": "string",
                    "description": "Optional project/list name filter. Matches against task list titles or project keywords (case-insensitive substring)."
                  },
                  "labelIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Filter tasks that have any of the provided Tasks label IDs. Useful for GTD contexts or custom labels."
                  }
                }
              },
              "examples": {
                "dailyTasks": {
                  "summary": "ALL today's active tasks (typical)",
                  "value": {
                    "scope": "daily",
                    "includeCompleted": false
                  }
                },
                "marketingProject": {
                  "summary": "ALL today's Marketing tasks",
                  "value": {
                    "scope": "daily",
                    "project": "Marketing"
                  }
                },
                "weeklyTasks": {
                  "summary": "ALL this week's active tasks",
                  "value": {
                    "scope": "weekly"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sections": {
                      "type": "object",
                      "description": "ALL tasks grouped by section. Complete list for scope.",
                      "properties": {
                        "today": {
                          "type": "array",
                          "description": "ALL tasks due today (not completed)"
                        },
                        "thisWeek": {
                          "type": "array",
                          "description": "ALL tasks due this week (not today)"
                        },
                        "overdue": {
                          "type": "array",
                          "description": "ALL overdue tasks (past due date)"
                        },
                        "completed": {
                          "type": "array",
                          "description": "Completed tasks (if includeCompleted=true)"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/contacts": {
      "post": {
        "operationId": "contactsRpc",
        "summary": "Advanced contact RPC (read-only + dedupe helpers)",
        "description": "Low-level contact helpers backed by Google Sheets. Supports list, search, add, dedupe, bulkUpsert, and addressSuggest. Mutating operations (modify, delete, bulkDelete) now live at /api/contacts/actions/modify|delete|bulkDelete.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsRpcRequest"
              },
              "examples": {
                "list": {
                  "summary": "Get all contacts",
                  "value": {
                    "op": "list"
                  }
                },
                "search": {
                  "summary": "Search for 'john'",
                  "value": {
                    "op": "search",
                    "params": {
                      "query": "john"
                    }
                  }
                },
                "add": {
                  "summary": "Add single contact",
                  "value": {
                    "op": "add",
                    "params": {
                      "name": "John Smith",
                      "email": "john@example.com"
                    }
                  }
                },
                "dedupe": {
                  "summary": "Find duplicate contacts",
                  "value": {
                    "op": "dedupe"
                  }
                },
                "bulkUpsert": {
                  "summary": "Batch add contacts",
                  "value": {
                    "op": "bulkUpsert",
                    "params": {
                      "contacts": [
                        {
                          "name": "Alice",
                          "email": "alice@example.com"
                        },
                        {
                          "name": "Bob",
                          "email": "bob@example.com"
                        }
                      ]
                    }
                  }
                },
                "addressSuggest": {
                  "summary": "Get address suggestions from realEstate field",
                  "value": {
                    "op": "addressSuggest",
                    "params": {
                      "query": "Vrchlického"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "Always true on success"
                    },
                    "data": {
                      "type": "object",
                      "description": "Response data (varies by operation). Reply/send flows return the Gmail payload and may include unrepliedLabelReminder so the assistant can offer removing the 'nevyřízeno' label after replying.",
                      "properties": {
                        "unrepliedLabelReminder": {
                          "type": ["object", "null"],
                          "description": "Present when the replied-to message still has the 'nevyřízeno' label. Use the provided modify payload(s) to remove it after confirming with the user; the meta_seen tracker stays in place.",
                          "properties": {
                            "labelId": { "type": "string" },
                            "labelName": { "type": "string" },
                            "threadId": { "type": ["string", "null"] },
                            "messages": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "messageId": { "type": "string" },
                                  "removeRequest": {
                                    "type": "object",
                                    "description": "Pre-filled /rpc/mail payload (op=labels, modify) to remove 'nevyřízeno' from the message."
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "additionalProperties": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAM"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/gmail/followups": {
      "get": {
        "operationId": "listFollowupCandidates",
        "summary": "List sent conversations awaiting follow-up",
        "description": "Identifies sent threads where the user's latest outbound message has not received a reply yet. Defaults to conversations between 3 and 14 days old and can include body previews for drafting follow-up reminders.",
        "parameters": [
          {
            "name": "minAgeDays",
            "in": "query",
            "description": "Minimum age in whole days for the most recent outbound message in a thread. Defaults to 3 so reminders start a few days after sending.",
            "schema": {
              "type": "number",
              "minimum": 0,
              "default": 3
            }
          },
          {
            "name": "maxAgeDays",
            "in": "query",
            "description": "Maximum age in days for the latest outbound message. Defaults to 14. Leave blank to allow older threads. Must be ≥ minAgeDays when provided.",
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 14
            }
          },
          {
            "name": "maxThreads",
            "in": "query",
            "description": "Maximum number of threads to return (1-50). Defaults to 15 for a focused shortlist.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 15
            }
          },
          {
            "name": "includeBodies",
            "in": "query",
            "description": "When true (default), include truncated plain-text bodies and content metadata for the last outbound message.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeDrafts",
            "in": "query",
            "description": "Include threads that currently end with a Gmail draft. Defaults to false to focus on already sent emails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Additional Gmail query to narrow results (subject:, to:, label:, etc.).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "historyLimit",
            "in": "query",
            "description": "How many recent messages to include per thread (1-10). Defaults to 5 to provide context without overwhelming the response.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "default": 5
            }
          },
          {
            "name": "pageToken",
            "in": "query",
            "description": "Gmail page token for continuing a previous follow-up search when hasMore=true.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Follow-up candidates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Always true when the request succeeds."
                    },
                    "threads": {
                      "type": "array",
                      "description": "Threads where the user is waiting for a reply.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "threadId": {
                            "type": "string",
                            "description": "Gmail thread ID."
                          },
                          "historyId": {
                            "type": "string",
                            "description": "Latest Gmail history ID for the thread."
                          },
                          "messageCount": {
                            "type": "integer",
                            "description": "Number of messages in the thread."
                          },
                          "subject": {
                            "type": "string"
                          },
                          "snippet": {
                            "type": "string",
                            "description": "Gmail snippet of the last outbound message."
                          },
                          "waitingSince": {
                            "type": [
                              "object",
                              "null"
                            ],
                            "description": "Timestamps of when the user last wrote in the thread (UTC + Europe/Prague).",
                            "properties": {
                              "epochMs": { "type": "number" },
                              "utc": { "type": "string", "format": "date-time" },
                              "prague": { "type": "string", "description": "ISO string adjusted to Europe/Prague offset." },
                              "offsetHours": { "type": "number" }
                            }
                          },
                          "waitingDays": {
                            "type": [
                              "number",
                              "null"
                            ],
                            "description": "How many days have passed since the last outbound message (one decimal)."
                          },
                          "lastMessageId": {
                            "type": "string"
                          },
                          "recipients": {
                            "type": "object",
                            "properties": {
                              "to": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": { "type": "string" },
                                    "name": { "type": ["string", "null"] },
                                    "raw": { "type": ["string", "null"] },
                                    "isUser": { "type": "boolean" }
                                  }
                                }
                              },
                              "cc": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": { "type": "string" },
                                    "name": { "type": ["string", "null"] },
                                    "raw": { "type": ["string", "null"] },
                                    "isUser": { "type": "boolean" }
                                  }
                                }
                              },
                              "bcc": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": { "type": "string" },
                                    "name": { "type": ["string", "null"] },
                                    "raw": { "type": ["string", "null"] },
                                    "isUser": { "type": "boolean" }
                                  }
                                }
                              }
                            }
                          },
                          "sender": {
                            "type": "object",
                            "properties": {
                              "raw": { "type": ["string", "null"] },
                              "address": { "type": ["string", "null"] },
                              "name": { "type": ["string", "null"] },
                              "isUser": { "type": "boolean" }
                            }
                          },
                          "headers": {
                            "type": "object",
                            "properties": {
                              "subject": { "type": ["string", "null"] },
                              "from": { "type": ["string", "null"] },
                              "to": { "type": ["string", "null"] },
                              "cc": { "type": ["string", "null"] },
                              "bcc": { "type": ["string", "null"] },
                              "date": { "type": ["string", "null"] }
                            }
                          },
                          "lastMessage": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "snippet": { "type": ["string", "null"] },
                              "timestamps": {
                                "type": ["object", "null"],
                                "properties": {
                                  "epochMs": { "type": "number" },
                                  "utc": { "type": "string", "format": "date-time" },
                                  "prague": { "type": "string" },
                                  "offsetHours": { "type": "number" }
                                }
                              },
                              "labelIds": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "readState": {
                                "type": "object",
                                "properties": {
                                  "isUnread": { "type": "boolean" },
                                  "isRead": { "type": "boolean" }
                                }
                              },
                              "sizeEstimate": { "type": ["integer", "null"] },
                              "hasAttachments": { "type": "boolean" },
                              "plainText": { "type": ["string", "null"] },
                              "contentMetadata": {
                                "type": ["object", "null"],
                                "properties": {
                                  "plainText": {
                                    "type": "object",
                                    "properties": {
                                      "available": { "type": "boolean" },
                                      "bytes": { "type": "integer" },
                                      "preview": { "type": ["string", "null"] },
                                      "truncated": { "type": "boolean" }
                                    }
                                  },
                                  "html": {
                                    "type": "object",
                                    "properties": {
                                      "available": { "type": "boolean" },
                                      "inline": { "type": "boolean" },
                                      "viaAttachments": { "type": "boolean" },
                                      "bytes": { "type": "integer" },
                                      "preview": { "type": ["string", "null"] },
                                      "truncated": { "type": "boolean" }
                                    }
                                  },
                                  "inlineImages": { "type": "integer" },
                                  "inlineAttachments": { "type": "integer" }
                                }
                              },
                              "links": {
                                "type": ["object", "null"],
                                "properties": {
                                  "thread": { "type": ["string", "null"] },
                                  "message": { "type": ["string", "null"] }
                                }
                              }
                            }
                          },
                          "lastInbound": {
                            "type": ["object", "null"],
                            "properties": {
                              "id": { "type": "string" },
                              "from": { "type": ["string", "null"] },
                              "fromAddress": { "type": ["string", "null"] },
                              "snippet": { "type": ["string", "null"] },
                              "timestamps": {
                                "type": ["object", "null"],
                                "properties": {
                                  "epochMs": { "type": "number" },
                                  "utc": { "type": "string", "format": "date-time" },
                                  "prague": { "type": "string" },
                                  "offsetHours": { "type": "number" }
                                }
                              },
                              "ageDays": { "type": ["number", "null"] }
                            }
                          },
                          "participants": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "address": { "type": "string" },
                                "name": { "type": ["string", "null"] },
                                "raw": { "type": ["string", "null"] },
                                "firstSeenIn": { "type": ["string", "null"] },
                                "firstMessageId": { "type": "string" },
                                "isUser": { "type": "boolean" }
                              }
                            }
                          },
                          "conversation": {
                            "type": "array",
                            "description": "Recent messages from the thread (up to historyLimit).",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "direction": {
                                  "type": "string",
                                  "enum": ["outgoing", "incoming", "draft"]
                                },
                                "subject": { "type": ["string", "null"] },
                                "from": { "type": ["string", "null"] },
                                "to": { "type": ["string", "null"] },
                                "cc": { "type": ["string", "null"] },
                                "bcc": { "type": ["string", "null"] },
                                "snippet": { "type": ["string", "null"] },
                                "timestamps": {
                                  "type": ["object", "null"],
                                  "properties": {
                                    "epochMs": { "type": "number" },
                                    "utc": { "type": "string", "format": "date-time" },
                                    "prague": { "type": "string" },
                                    "offsetHours": { "type": "number" }
                                  }
                                },
                                "labelIds": {
                                  "type": "array",
                                  "items": { "type": "string" }
                                },
                                "hasAttachments": { "type": "boolean" },
                                "readState": {
                                  "type": "object",
                                  "properties": {
                                    "isUnread": { "type": "boolean" },
                                    "isRead": { "type": "boolean" }
                                  }
                                }
                              }
                            }
                          },
                          "links": {
                            "type": ["object", "null"],
                            "properties": {
                              "thread": { "type": ["string", "null"] },
                              "message": { "type": ["string", "null"] }
                            }
                          }
                        }
                      }
                    },
                    "searchQuery": {
                      "type": "string",
                      "description": "Full Gmail query executed (combines range filters and any custom query)."
                    },
                    "generatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the follow-up list was generated."
                    },
                    "filters": {
                      "type": "object",
                      "description": "Final parameters applied by the backend.",
                      "properties": {
                        "minAgeDays": { "type": "number" },
                        "maxAgeDays": { "type": ["number", "null"] },
                        "maxThreads": { "type": "integer" },
                        "includeBodies": { "type": "boolean" },
                        "includeDrafts": { "type": "boolean" },
                        "historyLimit": { "type": "integer" },
                        "additionalQuery": { "type": ["string", "null"] },
                        "pageToken": { "type": ["string", "null"] }
                      }
                    },
                    "stats": {
                      "type": "object",
                      "description": "Diagnostic counters for transparency.",
                      "properties": {
                        "scannedMessages": { "type": "integer" },
                        "inspectedThreads": { "type": "integer" },
                        "skipped": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "integer"
                          },
                          "description": "Counts per skip reason (tooRecent, tooOld, missingThread, etc.)."
                        }
                      }
                    },
                    "hasMore": {
                      "type": "boolean",
                      "description": "true when additional threads are available via nextPageToken."
                    },
                    "nextPageToken": {
                      "type": ["string", "null"],
                      "description": "Pass to the next request to continue scanning Gmail results."
                    }
                  },
                  "required": [
                    "success",
                    "threads",
                    "hasMore"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid follow-up window (e.g., maxAgeDays < minAgeDays).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" },
                    "message": { "type": "string" },
                    "code": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/mail": {
      "post": {
        "operationId": "mailRpc",
        "summary": "Advanced mail operations",
        "description": "Low-level Gmail RPC. Operations: search, preview, read, create drafts, send, reply, modify labels, preview attachments. Use macros for common tasks, RPC for advanced control. Returns ALL matching results (within op limits). Attachment URLs expire 1h.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "op"
                ],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": [
                      "search",
                      "preview",
                      "read",
                      "createDraft",
                      "updateDraft",
                      "listDrafts",
                      "getDraft",
                      "send",
                      "reply",
                      "modify",
                      "attachmentPreview",
                      "labels"
                    ],
                    "description": "Operation: search, preview (metadata for ids), read (full email or by search), create drafts (trigger phrases: 'vytvořit mi draft', 'udělej mi draft'), update existing drafts, list or fetch drafts, send (direct OR by draftId), reply, modify labels, preview attachments, or manage labels list/modify."
                  },
                  "params": {
                    "anyOf": [
                      {
                        "type": "object",
                        "title": "Send Draft",
                        "description": "Send existing draft by ID (op=send with draftId)",
                        "required": [
                          "draftId"
                        ],
                        "properties": {
                          "draftId": {
                            "type": "string",
                            "pattern": "^r-[0-9]+$",
                            "example": "r-70585620154190988",
                            "description": "Draft ID returned from /macros/calendar/reminderDrafts. Format: r-XXXXXXXXX (immutable draft identifier)"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Send Direct Email",
                        "description": "Send email directly without draft (op=send with to+subject+body)",
                        "required": [
                          "to",
                          "subject",
                          "body"
                        ],
                        "properties": {
                          "to": {
                            "type": "string",
                            "format": "email",
                            "example": "recipient@example.com",
                            "description": "Recipient email address"
                          },
                          "subject": {
                            "type": "string",
                            "maxLength": 255,
                            "example": "Meeting tomorrow",
                            "description": "Email subject line"
                          },
                          "body": {
                            "type": "string",
                            "maxLength": 10000,
                            "example": "Hi, reminder about meeting at 7am",
                            "description": "Email body (plain text)"
                          },
                          "cc": {
                            "type": "string",
                            "description": "CC recipients (comma-separated, optional)"
                          },
                          "bcc": {
                            "type": "string",
                            "description": "BCC recipients (comma-separated, optional)"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Create Draft",
                        "description": "Create Gmail draft without sending (op=createDraft). Use for requests like 'vytvořit mi draft' or 'udělej mi draft'.",
                        "required": [
                          "to",
                          "subject",
                          "body"
                        ],
                        "properties": {
                          "to": {
                            "type": "string",
                            "format": "email",
                            "example": "coworker@example.com",
                            "description": "Recipient for the draft"
                          },
                          "subject": {
                            "type": "string",
                            "maxLength": 255,
                            "example": "Weekly status update",
                            "description": "Draft email subject"
                          },
                          "body": {
                            "type": "string",
                            "maxLength": 20000,
                            "example": "Ahoj, tady je návrh status reportu...",
                            "description": "Plain-text body saved to the draft"
                          },
                          "cc": {
                            "type": "string",
                            "description": "Optional CC recipients (comma-separated)"
                          },
                          "bcc": {
                            "type": "string",
                            "description": "Optional BCC recipients (comma-separated)"
                          },
                          "threadId": {
                            "type": "string",
                            "description": "Attach the draft to an existing Gmail thread"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Update Draft",
                        "description": "Update an existing Gmail draft in place (op=updateDraft). Use when GPT rewrites a draft the user already has in Gmail.",
                        "required": [
                          "draftId",
                          "to",
                          "subject",
                          "body"
                        ],
                        "properties": {
                          "draftId": {
                            "type": "string",
                            "description": "Existing Gmail draft ID to update"
                          },
                          "to": {
                            "type": "string",
                            "format": "email",
                            "description": "Updated recipient list"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Updated subject"
                          },
                          "body": {
                            "type": "string",
                            "description": "Updated plain-text body"
                          },
                          "cc": {
                            "type": "string",
                            "description": "Optional CC recipients"
                          },
                          "bcc": {
                            "type": "string",
                            "description": "Optional BCC recipients"
                          },
                          "threadId": {
                            "type": "string",
                            "description": "Optional Gmail thread ID to keep the draft threaded"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "List Drafts",
                        "description": "List Gmail drafts for the account (op=listDrafts). Useful to locate drafts before editing.",
                        "properties": {
                          "maxResults": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "description": "Limit how many drafts to return"
                          },
                          "pageToken": {
                            "type": "string",
                            "description": "Page token from a previous listDrafts call"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Get Draft",
                        "description": "Fetch a specific Gmail draft (op=getDraft) to show the latest content before editing.",
                        "required": [
                          "draftId"
                        ],
                        "properties": {
                          "draftId": {
                            "type": "string",
                            "description": "Draft ID to fetch"
                          },
                          "format": {
                            "type": "string",
                            "enum": [
                              "full",
                              "metadata",
                              "minimal"
                            ],
                            "description": "Optional Gmail format hint (defaults to full)"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Search",
                        "description": "Search emails (op=search)",
                        "required": [
                          "query"
                        ],
                        "properties": {
                          "query": {
                            "type": "string",
                            "description": "Gmail search query (from:, to:, subject:, has:attachment, etc.)"
                          },
                          "maxResults": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100
                          },
                          "labelIds": {
                            "oneOf": [
                              { "type": "string" },
                              {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            ],
                            "description": "Optional Gmail label IDs to filter results (e.g., use with the 'nevyřízeno' label). Always fetch fresh results instead of relying on cached label membership."
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Attachment preview",
                        "description": "Preview text/table from attachment (op=attachmentPreview)",
                        "required": [
                          "messageId",
                          "attachmentId",
                          "mode"
                        ],
                        "properties": {
                          "messageId": {
                            "type": "string"
                          },
                          "attachmentId": {
                            "type": "string"
                          },
                          "mode": {
                            "type": "string",
                            "enum": [
                              "text",
                              "table"
                            ]
                          },
                          "maxKb": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 512
                          },
                          "maxRows": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 200
                          },
                          "delimiter": {
                            "type": "string",
                            "description": "Table delimiter (optional, defaults to auto)."
                          }
                        }
                      },
                      {
                        "type": "object",
                        "title": "Labels ops",
                        "description": "List or modify labels (op=labels)",
                        "properties": {
                          "list": {
                            "type": "boolean"
                          },
                          "includeMatchesFor": {
                            "oneOf": [
                              { "type": "string" },
                              {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            ],
                            "description": "Optional array (or single string) of label names provided by the user. When present, the server performs fuzzy matching and returns resolution metadata alongside the label list."
                          },
                          "search": {
                            "oneOf": [
                              { "type": "string" },
                              {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            ],
                            "description": "Alias for includeMatchesFor. Accepts a single string or array for backwards compatibility."
                          },
                          "lookup": {
                            "oneOf": [
                              { "type": "string" },
                              {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            ],
                            "description": "Another alias for includeMatchesFor used by some orchestrators."
                          },
                          "resolve": {
                            "oneOf": [
                              { "type": "string" },
                              {
                                "type": "array",
                                "items": { "type": "string" }
                              }
                            ],
                            "description": "Resolve label strings without returning the full label directory. Returns the same resolution object used by macros."
                          },
                          "forceRefresh": {
                            "type": "boolean",
                            "description": "When true, bypasses the 5-minute label cache before resolving/listing."
                          },
                          "modify": {
                            "type": "object",
                            "properties": {
                              "messageId": {
                                "type": "string"
                              },
                              "ids": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Alternative to messageId. When provided, modifies first id only (matches service)."
                              },
                              "add": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "remove": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Generic parameters for other ops (preview, read, reply, modify). See examples for common shapes.",
                        "additionalProperties": true
                      }
                    ],
                    "description": "Parameters depend on op value. Specific schemas provided for common cases; other operations accept their documented fields."
                  }
                }
              },
              "examples": {
                "searchEmails": {
                  "summary": "Search with Gmail query",
                  "value": {
                    "op": "search",
                    "params": {
                      "query": "from:john@example.com subject:meeting",
                      "maxResults": 100
                    }
                  }
                },
                "sendDirectEmail": {
                  "summary": "Send email directly (FIXED: All fields required in params)",
                  "value": {
                    "op": "send",
                    "params": {
                      "to": "recipient@example.com",
                      "subject": "Meeting tomorrow",
                      "body": "Hi, reminder about meeting at 7am"
                    }
                  }
                },
                "createDraft": {
                  "summary": "Create draft without sending",
                  "value": {
                    "op": "createDraft",
                    "params": {
                      "to": "coworker@example.com",
                      "subject": "Weekly status update",
                      "body": "Ahoj! Posílám koncept reportu ke schválení."
                    }
                  }
                },
                "sendDraft": {
                  "summary": "Send existing draft by ID",
                  "value": {
                    "op": "send",
                    "params": {
                      "draftId": "18abc123def456"
                    }
                  }
                },
                "attachmentPreview": {
                  "summary": "Preview attachment text",
                  "value": {
                    "op": "attachmentPreview",
                    "params": {
                      "messageId": "1890de2cafe3a3b7",
                      "attachmentId": "ANGjdJ9XbExample",
                      "mode": "text",
                      "maxKb": 128
                    }
                  }
                },
                "listLabels": {
                  "summary": "List all Gmail labels",
                  "value": {
                    "op": "labels",
                    "params": {
                      "list": true
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed"
          },
          "400": {
            "description": "Invalid request format - detailed error with expected format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string",
                      "description": "Specific format requirements"
                    },
                    "option1": {
                      "type": "object"
                    },
                    "option2": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/calendar": {
      "post": {
        "operationId": "calendarRpc",
        "summary": "Advanced calendar operations",
        "description": "Low-level calendar RPC. Operations: list, get, create, update, delete, checkConflicts. Use macros for schedule/plan, RPC for advanced CRUD. Always include eventId for update/delete. Defaults to primary calendar when calendarId is omitted.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "op"
                ],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": [
                      "list",
                      "get",
                      "create",
                      "update",
                      "delete",
                      "checkConflicts"
                    ],
                    "description": "Operation type. CRITICAL for update: must include eventId and updates fields with proper start/end structure."
                  },
                  "params": {
                    "type": "object",
                    "description": "FIXED: Operation parameters. CRITICAL for update: eventId (required) + updates object with start/end as objects containing {dateTime, timeZone}. Optional calendarId defaults to 'primary'.",
                    "properties": {
                      "calendarId": {
                        "type": "string",
                        "description": "Optional calendar identifier. Defaults to 'primary'. Use only when targeting non-primary calendars."
                      },
                      "eventId": {
                        "type": "string",
                        "description": "Event ID (REQUIRED for: get, update, delete, checkConflicts). Get from list or previous response."
                      },
                      "updates": {
                        "type": "object",
                        "description": "Fields to update (for op=update). Can include: start, end, summary, description, attendees, location, reminders. CRITICAL: start and end must be objects with {dateTime, timeZone}.",
                        "properties": {
                          "start": {
                            "type": "object",
                            "description": "FIXED: start is an OBJECT with required fields dateTime and timeZone",
                            "required": [
                              "dateTime",
                              "timeZone"
                            ],
                            "properties": {
                              "dateTime": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-10-21T15:00:00",
                                "description": "ISO 8601 datetime (without +HH:MM in string, that's in timeZone)"
                              },
                              "timeZone": {
                                "type": "string",
                                "example": "Europe/Prague",
                                "description": "REQUIRED: Timezone identifier. Use 'Europe/Prague' or valid IANA timezone."
                              }
                            }
                          },
                          "end": {
                            "type": "object",
                            "description": "FIXED: end is an OBJECT with required fields dateTime and timeZone",
                            "required": [
                              "dateTime",
                              "timeZone"
                            ],
                            "properties": {
                              "dateTime": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2025-10-21T16:00:00"
                              },
                              "timeZone": {
                                "type": "string",
                                "example": "Europe/Prague"
                              }
                            }
                          },
                          "summary": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string"
                          },
                          "attendees": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "email": {
                                  "type": "string",
                                  "format": "email"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "listEvents": {
                  "summary": "List ALL events in date range",
                  "value": {
                    "op": "list",
                    "params": {
                      "timeMin": "2025-10-20T00:00:00Z",
                      "timeMax": "2025-10-27T23:59:59Z"
                    }
                  }
                },
                "listSharedCalendar": {
                  "summary": "List events from shared calendar",
                  "value": {
                    "op": "list",
                    "params": {
                      "calendarId": "team@example.com",
                      "timeMin": "2025-10-20T00:00:00Z",
                      "timeMax": "2025-10-27T23:59:59Z"
                    }
                  }
                },
                "updateEventTime": {
                  "summary": "Reschedule event (FIXED: Proper structure with {dateTime, timeZone})",
                  "value": {
                    "op": "update",
                    "params": {
                      "eventId": "uemjv6bneskjfej5t9onrlikq0",
                      "updates": {
                        "start": {
                          "dateTime": "2025-10-21T15:00:00",
                          "timeZone": "Europe/Prague"
                        },
                        "end": {
                          "dateTime": "2025-10-21T16:00:00",
                          "timeZone": "Europe/Prague"
                        },
                        "attendees": [
                          {
                            "email": "user@example.com"
                          }
                        ]
                      }
                    }
                  }
                },
                "checkConflicts": {
                  "summary": "Check for conflicts in time slot",
                  "value": {
                    "op": "checkConflicts",
                    "params": {
                      "start": "2025-10-21T07:00:00Z",
                      "end": "2025-10-21T08:00:00Z"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed"
          },
          "400": {
            "description": "Invalid request format - detailed error with expected structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "expectedFormat": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/tasks": {
      "post": {
        "operationId": "tasksRpc",
        "summary": "Tasks RPC (read-only)",
        "description": "Low-level tasks RPC for read scenarios. Supports list (with pagination) and a placeholder get (returns 501). All mutating operations moved to /api/tasks/actions/* where payloads are simpler for GPT.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksRpcRequest"
              },
              "examples": {
                "list": {
                  "summary": "List tasks with pagination",
                  "value": {
                    "op": "list",
                    "params": {
                      "maxResults": 10,
                      "showCompleted": false
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed"
          },
          "410": {
            "description": "Mutation attempted via RPC. Client should call /api/tasks/actions/* endpoints."
          }
        }
      }
    },
    "/contacts/actions/modify": {
      "post": {
        "operationId": "contactsModify",
        "tags": [
          "Contacts"
        ],
        "summary": "Modify an existing contact (idempotent)",
        "description": "Direct mutation endpoint for GPT. Updates an existing contact identified by name+email; creates if missing. Provide Idempotency-Key header for safe retries.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsModifyActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "contact": {
                      "type": "object",
                      "description": "Updated contact payload"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contacts/actions/delete": {
      "post": {
        "operationId": "contactsDelete",
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact (email or name)",
        "description": "Deletes a contact row from Google Sheets by email (preferred) or by unique name. Returns 409 if name matches multiple contacts.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsDeleteActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "deleted": {
                      "type": "object",
                      "description": "Deleted contact data (if available)"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contacts/actions/bulkDelete": {
      "post": {
        "operationId": "contactsBulkDelete",
        "tags": [
          "Contacts"
        ],
        "summary": "Bulk delete contacts (emails or rowIds)",
        "description": "Delete full contacts by email or remove duplicate rows by rowIds. Accepts up to 100 entries per call.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsBulkDeleteActionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rows deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "deleted": {
                      "type": "integer",
                      "description": "Number of rows removed."
                    },
                    "mode": {
                      "type": "string",
                      "enum": [
                        "emails",
                        "rowIds"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tasks/actions/create": {
      "post": {
        "operationId": "tasksCreateAction",
        "tags": [
          "Tasks"
        ],
        "summary": "Create a new task in the default list",
        "description": "Creates a task in the user's primary Google Tasks list. Due dates accept YYYY-MM-DD or full RFC3339 timestamps; backend normalizes bare dates to midnight UTC.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksActionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "task": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tasks/actions/modify": {
      "post": {
        "operationId": "tasksModifyAction",
        "tags": [
          "Tasks"
        ],
        "summary": "Update an existing task",
        "description": "Updates an existing task using Google Tasks patch semantics. Supply taskListId + taskId and at least one of status/title/notes/due. Use status=completed or status=needsAction for complete/reopen flows.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksActionModifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "task": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tasks/actions/delete": {
      "post": {
        "operationId": "tasksDeleteAction",
        "tags": [
          "Tasks"
        ],
        "summary": "Delete a task",
        "description": "Deletes a Google Task identified by taskListId and taskId. Request is idempotent; deleting an already-removed task is treated as success.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksActionDeleteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MacroEmailQuickReadItem": {
        "type": "object",
        "description": "Email payload returned by /macros/email/quickRead including body availability metadata and Gmail web links.",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Gmail message ID"
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "body": {
            "type": "string",
            "description": "Email body rendered according to requested format"
          },
          "attachments": {
            "type": "array",
            "description": "Attachments with signed download URLs (expire 1 hour). Blocked files expose blocked=true and omit URL.",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "mimeType": {
                  "type": "string"
                },
                "url": {
                  "type": [
                    "string",
                    "null"
                  ],
                  "description": "Signed URL (expires 1h). Null when blocked."
                },
                "blocked": {
                  "type": "boolean",
                  "description": "True when file blocked by security policy"
                }
              }
            }
          },
          "links": {
            "type": [
              "object",
              "null"
            ],
            "description": "Direct Gmail web links for quick manual review",
            "properties": {
              "thread": {
                "type": "string",
                "description": "Link to open the full Gmail thread"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Single message view link (null if not available)"
              }
            }
          },
          "truncated": {
            "type": "boolean",
            "description": "True if backend truncated large body for safety"
          },
          "truncationInfo": {
            "type": "object",
            "description": "Original size statistics when truncation occurred",
            "properties": {
              "originalSize": {
                "type": "integer",
                "description": "Original Gmail payload size in bytes"
              },
              "maxAllowedSize": {
                "type": "integer",
                "description": "Backend safety limit in bytes"
              },
              "truncatedBodyLength": {
                "type": "integer",
                "description": "Number of characters kept after truncation"
              }
            }
          },
          "contentMetadata": {
            "type": "object",
            "description": "Availability of plain text vs HTML body variants and inline assets",
            "properties": {
              "plainText": {
                "type": "object",
                "properties": {
                  "available": {
                    "type": "boolean",
                    "description": "True when a text/plain part exists"
                  },
                  "bytes": {
                    "type": "integer",
                    "description": "Decoded byte size of available text/plain parts"
                  },
                  "preview": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "First ~500 characters of plain text body when available"
                  },
                  "truncated": {
                    "type": "boolean",
                    "description": "True if preview was shortened to 500 characters"
                  }
                }
              },
              "html": {
                "type": "object",
                "properties": {
                  "available": {
                    "type": "boolean",
                    "description": "True when an HTML body exists"
                  },
                  "inline": {
                    "type": "boolean",
                    "description": "True if HTML body was delivered inline"
                  },
                  "viaAttachments": {
                    "type": "boolean",
                    "description": "True when HTML is stored as attachment requiring extra fetch"
                  },
                  "bytes": {
                    "type": "integer",
                    "description": "Decoded byte size of HTML segments returned inline"
                  },
                  "preview": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "First ~500 characters of decoded HTML"
                  },
                  "truncated": {
                    "type": "boolean",
                    "description": "True if HTML preview trimmed to 500 characters"
                  }
                }
              },
              "inlineImages": {
                "type": "integer",
                "description": "Count of inline image MIME parts"
              },
              "inlineAttachments": {
                "type": "integer",
                "description": "Count of other inline attachments (e.g., buttons, logos)"
              }
            }
          }
        }
      },
      "UnansweredBucket": {
        "type": "object",
        "description": "Bucket of threads waiting for the user's reply. Separate instances returned for unread vs. read conversations.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Conversation cards awaiting reply (respecting maxItems).",
            "items": {
              "type": "object",
              "properties": {
                "threadId": { "type": "string" },
                "messageId": { "type": "string" },
                "subject": { "type": "string" },
                "sender": {
                  "type": "object",
                  "properties": {
                    "name": { "type": ["string", "null"] },
                    "email": { "type": ["string", "null"] }
                  }
                },
                "receivedAt": {
                  "type": ["string", "null"],
                  "description": "Europe/Prague ISO timestamp of the latest incoming message."
                },
                "receivedInternal": {
                  "type": ["integer", "null"],
                  "description": "Gmail internalDate (ms epoch) for the latest incoming message."
                },
                "snippet": { "type": "string" },
                "gmailLinks": {
                  "type": ["object", "null"],
                  "properties": {
                    "thread": { "type": "string" },
                    "message": { "type": ["string", "null"] }
                  }
                },
                "messageCount": { "type": "integer" },
                "readState": {
                  "type": "object",
                  "properties": {
                    "isUnread": { "type": "boolean" },
                    "isRead": { "type": "boolean" }
                  }
                },
                "hasUserReply": { "type": "boolean" },
                "lastUserReplyAt": { "type": ["string", "null"] },
                "lastUserReplyInternal": { "type": ["integer", "null"] },
                "waitingMinutes": { "type": ["integer", "null"] },
                "waitingHoursApprox": { "type": ["number", "null"] },
                "sinceLastUserReplyMinutes": { "type": ["integer", "null"] },
                "participants": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": { "type": ["string", "null"] },
                      "name": { "type": ["string", "null"] }
                    }
                  }
                },
                "label": {
                  "type": ["object", "null"],
                  "properties": {
                    "suggestedId": { "type": "string" },
                    "suggestedName": { "type": "string" },
                    "alreadyApplied": { "type": "boolean" }
                  }
                },
                "labelApplied": { "type": "boolean" },
                "strictFiltered": {
                  "type": "boolean",
                  "description": "true when the item would be hidden in strict mode because you already replied earlier."
                }
              }
            }
          },
          "subset": {
            "type": "boolean",
            "description": "true when additional matching threads exist beyond this response."
          },
          "nextPageToken": {
            "type": ["string", "null"],
            "description": "Token for fetching the next page of this bucket via unreadPageToken/readPageToken."
          },
          "scanned": {
            "type": "integer",
            "description": "Number of Gmail messages inspected while building this bucket."
          },
          "overflowCount": {
            "type": "integer",
            "description": "Threads omitted because maxItems limit was reached."
          },
          "skippedReasons": {
            "type": "object",
            "description": "Diagnostic map of skip reasons (e.g., lastMessageFromUser, userReplyPresent).",
            "additionalProperties": { "type": "integer" }
          }
        }
      },
      "ContactsRpcRequest": {
        "type": "object",
        "required": [
          "op"
        ],
        "description": "Contacts RPC payload. Always send an 'op'; pass parameters inside params{} or directly on the root. Use op:'dedupe' to fetch duplicate row groups, then call /contacts/actions/bulkDelete with rowIds to prune extras or emails to remove a contact. Mutations now live under /api/contacts/actions/*.",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "list",
              "dedupe",
              "search",
              "add",
              "bulkUpsert",
              "addressSuggest"
            ],
            "description": "Operation to perform against the Google Sheets contacts backend."
          },
          "params": {
            "type": "object",
            "description": "Operation-specific parameters. The schema depends on the chosen op and is validated via the referenced sub-schemas."
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ContactsListRequest"
          },
          {
            "$ref": "#/components/schemas/ContactsDedupeRequest"
          },
          {
            "$ref": "#/components/schemas/ContactsSearchRequest"
          },
          {
            "$ref": "#/components/schemas/ContactsAddRequest"
          },
          {
            "$ref": "#/components/schemas/ContactsBulkUpsertRequest"
          },
          {
            "$ref": "#/components/schemas/ContactsAddressSuggestRequest"
          }
        ],
        "x-googleSheetsParams": {
          "list": {
            "description": "List all contacts – no params needed (omit or {})."
          },
          "dedupe": {
            "description": "Find duplicate groups in Google Sheets. No params required."
          },
          "search": {
            "description": "Search contacts. Params: {query}",
            "schema": {
              "type": "object",
              "required": [
                "query"
              ],
              "properties": {
                "query": {
                  "type": "string",
                  "description": "Search expression (diacritics stripped)."
                }
              }
            }
          },
          "add": {
            "description": "Add a single contact row. Params: {name, email?, phone?, realestate?, notes?}",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "realestate": {
                  "type": "string"
                },
                "notes": {
                  "type": "string"
                }
              }
            }
          },
          "update": {
            "description": "Update an existing contact (matched by email). Params: {email, name?, phone?, realestate?, notes?}",
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "realestate": {
                  "type": "string"
                },
                "notes": {
                  "type": "string"
                }
              }
            }
          },
          "delete": {
            "description": "Delete contacts by email or name. Params: {email? | name?}",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "bulkUpsert": {
            "description": "Upsert up to 50 contacts. Params: {contacts: Contact[]} where Contact={name, email?, phone?, realestate?, notes?}",
            "schema": {
              "type": "object",
              "required": [
                "contacts"
              ],
              "properties": {
                "contacts": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 50,
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "realestate": {
                        "type": "string"
                      },
                      "notes": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "bulkDelete": {
            "description": "Delete by emails (all rows) or rowIds (specific duplicates). Params: {emails?: string[], rowIds?: number[]}",
            "schema": {
              "oneOf": [
                {
                  "type": "object",
                  "required": [
                    "emails"
                  ],
                  "properties": {
                    "emails": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "required": [
                    "rowIds"
                  ],
                  "properties": {
                    "rowIds": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "integer"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "addressSuggest": {
            "description": "Get address suggestions for the realEstate column. Params: {query}",
            "schema": {
              "type": "object",
              "required": [
                "query"
              ],
              "properties": {
                "query": {
                  "type": "string"
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "ContactsBaseRequest": {
        "type": "object",
        "required": [
          "op"
        ],
        "properties": {
          "op": {
            "type": "string"
          },
          "params": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "ContactsListRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "properties": {
              "op": {
                "const": "list"
              },
              "params": {
                "type": "object",
                "description": "No params required. Omit entirely or send {}.",
                "maxProperties": 0
              }
            }
          }
        ]
      },
      "ContactsDedupeRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "properties": {
              "op": {
                "const": "dedupe"
              },
              "params": {
                "type": "object",
                "description": "No params required. Omit entirely or send {}.",
                "maxProperties": 0
              }
            }
          }
        ]
      },
      "ContactsSearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "search"
              },
              "params": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Search expression for contact sheet rows."
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "ContactsAddRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "add"
              },
              "params": {
                "type": "object",
                "required": [
                  "name",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "realestate": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "ContactsUpdateRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "update"
              },
              "params": {
                "type": "object",
                "required": [
                  "name",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "realestate": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "ContactsDeleteRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "delete"
              },
              "params": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "oneOf": [
                  {
                    "required": [
                      "email"
                    ]
                  },
                  {
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "required": [
                      "email",
                      "name"
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "ContactsBulkUpsertRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "bulkUpsert"
              },
              "params": {
                "type": "object",
                "required": [
                  "contacts"
                ],
                "properties": {
                  "contacts": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "realestate": {
                          "type": "string"
                        },
                        "notes": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "ContactsBulkDeleteByEmailsRequest": {
        "anyOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactsBaseRequest"
              },
              {
                "required": [
                  "params"
                ],
                "properties": {
                  "op": {
                    "const": "bulkDelete"
                  },
                  "params": {
                    "type": "object",
                    "required": [
                      "emails"
                    ],
                    "properties": {
                      "emails": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "string",
                          "format": "email"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "op",
              "emails"
            ],
            "properties": {
              "op": {
                "const": "bulkDelete"
              },
              "emails": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ContactsBulkDeleteByRowIdsRequest": {
        "anyOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactsBaseRequest"
              },
              {
                "required": [
                  "params"
                ],
                "properties": {
                  "op": {
                    "const": "bulkDelete"
                  },
                  "params": {
                    "type": "object",
                    "required": [
                      "rowIds"
                    ],
                    "properties": {
                      "rowIds": {
                        "type": "array",
                        "minItems": 1,
                        "items": {
                          "type": "integer"
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "op",
              "rowIds"
            ],
            "properties": {
              "op": {
                "const": "bulkDelete"
              },
              "rowIds": {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "integer"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ContactsAddressSuggestRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactsBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "addressSuggest"
              },
              "params": {
                "type": "object",
                "required": [
                  "query"
                ],
                "properties": {
                  "query": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "TasksRpcRequest": {
        "type": "object",
        "required": [
          "op"
        ],
        "description": "Tasks RPC payload (read-only). Parameters may be wrapped in a 'params' object or provided directly beside 'op'. Mutating operations were migrated to /api/tasks/actions/*.",
        "properties": {
          "op": {
            "type": "string",
            "enum": [
              "list",
              "get"
            ],
            "description": "Operation to execute on Google Tasks."
          },
          "params": {
            "type": "object",
            "description": "Operation-specific parameters validated by the targeted request schema."
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/TasksListRequest"
          },
          {
            "$ref": "#/components/schemas/TasksGetRequest"
          }
        ],
        "additionalProperties": false
      },
      "TasksBaseRequest": {
        "type": "object",
        "required": [
          "op"
        ],
        "properties": {
          "op": {
            "type": "string"
          },
          "params": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      "TasksListRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TasksBaseRequest"
          },
          {
            "properties": {
              "op": {
                "const": "list"
              },
              "params": {
                "type": "object",
                "properties": {
                  "taskListId": {
                    "type": "string"
                  },
                  "maxResults": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100
                  },
                  "pageToken": {
                    "type": "string"
                  },
                  "showCompleted": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "TasksGetRequest": {
        "description": "Placeholder for future single-task retrieval. Currently returns HTTP 501 (not implemented).",
        "allOf": [
          {
            "$ref": "#/components/schemas/TasksBaseRequest"
          },
          {
            "required": [
              "params"
            ],
            "properties": {
              "op": {
                "const": "get"
              },
              "params": {
                "type": "object",
                "required": [
                  "taskListId",
                  "taskId"
                ],
                "properties": {
                  "taskListId": {
                    "type": "string"
                  },
                  "taskId": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        ]
      },
      "ContactsModifyActionRequest": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the contact (required)."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address (required)."
          },
          "phone": {
            "type": "string",
            "description": "Phone number (optional)."
          },
          "realEstate": {
            "type": "string",
            "description": "Organization/company (camelCase variant)."
          },
          "realestate": {
            "type": "string",
            "description": "Organization/company (legacy lowercase alias)."
          },
          "notes": {
            "type": "string",
            "description": "Notes field (optional)."
          }
        },
        "additionalProperties": false,
        "description": "Payload for /api/contacts/modify. Provide both name and email; optional fields overwrite stored values."
      },
      "ContactsDeleteActionRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the contact to delete."
          },
          "name": {
            "type": "string",
            "description": "Name of the contact (used when deleting by name)."
          }
        },
        "additionalProperties": false,
        "description": "Payload for /api/contacts/delete. Provide email (preferred) or name. If both supplied, both must match.",
        "anyOf": [
          {
            "required": [
              "email"
            ]
          },
          {
            "required": [
              "name"
            ]
          }
        ]
      },
      "ContactsBulkDeleteActionRequest": {
        "type": "object",
        "description": "Payload for /api/contacts/actions/bulkDelete. Send exactly one field: emails[] deletes full contacts by address, rowIds[] deletes duplicate rows by sheet index.",
        "properties": {
          "emails": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "string",
              "format": "email"
            },
            "description": "Emails whose rows should be removed (deletes all rows matching each email)."
          },
          "rowIds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "integer",
              "minimum": 2
            },
            "description": "Sheet row indexes to delete (1-based, e.g. 2 removes second contact row)."
          }
        },
        "required": [],
        "additionalProperties": false
      },
      "TasksActionCreateRequest": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Task title (required)."
          },
          "notes": {
            "type": "string",
            "description": "Optional task notes."
          },
          "due": {
            "type": "string",
            "description": "Due date. Accepts YYYY-MM-DD or full RFC3339 timestamp."
          }
        },
        "additionalProperties": false
      },
      "TasksActionModifyRequest": {
        "type": "object",
        "required": [
          "taskListId",
          "taskId"
        ],
        "properties": {
          "taskListId": {
            "type": "string",
            "description": "Google Tasks list identifier."
          },
          "taskId": {
            "type": "string",
            "description": "Task identifier within the list."
          },
          "status": {
            "type": "string",
            "enum": [
              "needsAction",
              "completed"
            ],
            "description": "Set to completed or needsAction to close/reopen."
          },
          "title": {
            "type": "string",
            "description": "New task title."
          },
          "notes": {
            "type": "string",
            "description": "New task notes."
          },
          "due": {
            "type": "string",
            "description": "Updated due date (YYYY-MM-DD or RFC3339)."
          },
          "updates": {
            "type": "object",
            "description": "Alternative nested patch payload. Supports title/notes/due/status keys.",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "needsAction",
                  "completed"
                ]
              },
              "title": {
                "type": "string"
              },
              "notes": {
                "type": "string"
              },
              "due": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "oneOf": [
          {
            "required": [
              "status"
            ]
          },
          {
            "required": [
              "title"
            ]
          },
          {
            "required": [
              "notes"
            ]
          },
          {
            "required": [
              "due"
            ]
          },
          {
            "required": [
              "updates"
            ]
          }
        ],
        "additionalProperties": false
      },
      "TasksActionDeleteRequest": {
        "type": "object",
        "required": [
          "taskListId",
          "taskId"
        ],
        "properties": {
          "taskListId": {
            "type": "string",
            "description": "Google Tasks list identifier."
          },
          "taskId": {
            "type": "string",
            "description": "Task identifier within the list."
          }
        },
        "additionalProperties": false
      }
    }
  }
}
