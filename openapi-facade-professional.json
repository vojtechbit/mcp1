{
  "openapi": "3.1.0",
  "info": {
    "title": "Alfred Assistant API",
    "version": "2.1.0",
    "description": "Complete API for managing Gmail, Google Calendar, Contacts, and Tasks. This API provides high-level macros optimized for common workflows (like checking inbox, scheduling meetings) and low-level RPC operations for advanced use cases. All times use Europe/Prague timezone. Relative time windows (today, yesterday, thisWeek) are automatically resolved server-side."
  },
  "servers": [
    {
      "url": "https://mcp1-oauth-server.onrender.com/api",
      "description": "Production server"
    }
  ],
  "paths": {
    "/macros/inbox/overview": {
      "post": {
        "operationId": "macroInboxOverview",
        "summary": "Get lightweight inbox overview",
        "description": "Retrieves a quick overview of recent emails WITHOUT body text - perfect for answering 'Who emailed me today?' or 'Show my inbox'. Returns email cards with sender, subject, and timestamp. Use this when you need a fast overview without reading full messages. Maximum 200 emails per request. If more emails exist, the response includes subset=true and a pagination token. For emails WITH body text, use /macros/inbox/snippets instead.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timeRange": {
                    "type": "object",
                    "description": "Time window for emails. Use 'relative' for natural language time periods.",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": ["lastHour", "last3h", "last24h", "today", "yesterday", "thisWeek", "last7d"],
                        "description": "Relative time window: 'today' = today's emails in Europe/Prague timezone, 'thisWeek' = Monday-Sunday of current week, 'last24h' = last 24 hours from now"
                      }
                    }
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 200,
                    "default": 50,
                    "description": "Maximum number of emails to return. Default is 50. Use lower values (10-20) for quick checks, higher (100-200) for comprehensive reviews."
                  },
                  "filters": {
                    "type": "object",
                    "description": "Optional filters to narrow results",
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Filter by sender email or name fragment. Example: 'john@example.com' or just 'john'"
                      },
                      "hasAttachment": {
                        "type": "boolean",
                        "description": "If true, only return emails with attachments"
                      }
                    }
                  }
                }
              },
              "examples": {
                "todaysEmails": {
                  "summary": "Get today's emails",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "maxItems": 50
                  }
                },
                "fromSpecificSender": {
                  "summary": "Emails from specific sender today",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "filters": {
                      "from": "john@example.com"
                    }
                  }
                },
                "withAttachments": {
                  "summary": "Recent emails with attachments",
                  "value": {
                    "timeRange": {
                      "relative": "last24h"
                    },
                    "filters": {
                      "hasAttachment": true
                    },
                    "maxItems": 20
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved email overview",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "Array of email cards",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "description": "Unique Gmail message ID - use this to read the full email with /macros/email/quickRead"
                          },
                          "senderName": {
                            "type": "string",
                            "description": "Display name of sender"
                          },
                          "senderAddress": {
                            "type": "string",
                            "description": "Email address of sender"
                          },
                          "subject": {
                            "type": "string",
                            "description": "Email subject line"
                          },
                          "receivedAt": {
                            "type": "string",
                            "description": "ISO 8601 timestamp when email was received"
                          },
                          "inboxCategory": {
                            "type": "string",
                            "description": "Auto-categorized inbox category: primary (important), work, alerts, newsletters, social, updates, forums, other"
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "If true, more emails are available beyond this response. Use pagination token to get more."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "Token to fetch next page of results. Null if no more results."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/inbox/snippets": {
      "post": {
        "operationId": "macroInboxSnippets",
        "summary": "Get inbox with email body snippets",
        "description": "Retrieves emails WITH body text snippets (first 200-300 characters) and attachment download URLs. Perfect for answering 'What did John say in his email?' or 'Show me emails with attachments'. Each email includes a snippet of the body text and signed URLs for downloading attachments (PDF, Excel, CSV, etc.). Attachment URLs expire after 1 hour. Maximum 50 emails per request. Use this when you need to preview email content without reading full messages. For just sender/subject info, use /macros/inbox/overview (faster). For full email bodies, use /macros/email/quickRead.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timeRange": {
                    "type": "object",
                    "description": "Time window for emails",
                    "properties": {
                      "relative": {
                        "type": "string",
                        "enum": ["lastHour", "last3h", "last24h", "today", "yesterday", "thisWeek", "last7d"],
                        "description": "Relative time period. 'today' = today in Europe/Prague timezone"
                      }
                    }
                  },
                  "maxItems": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 20,
                    "description": "Max emails to return. Note: Lower limit than overview (50 vs 200) because body snippets are included. Use 10-20 for quick checks."
                  },
                  "includeAttachments": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true, includes signed download URLs for attachments. URLs expire after 1 hour. Set to false for faster response if attachments not needed."
                  },
                  "filters": {
                    "type": "object",
                    "description": "Optional filters",
                    "properties": {
                      "from": {
                        "type": "string",
                        "description": "Filter by sender email or name"
                      },
                      "hasAttachment": {
                        "type": "boolean",
                        "description": "Only return emails with attachments"
                      }
                    }
                  }
                }
              },
              "examples": {
                "todayWithSnippets": {
                  "summary": "Today's emails with body previews",
                  "value": {
                    "timeRange": {
                      "relative": "today"
                    },
                    "maxItems": 20,
                    "includeAttachments": true
                  }
                },
                "recentAttachments": {
                  "summary": "Recent emails with attachments only",
                  "value": {
                    "timeRange": {
                      "relative": "last24h"
                    },
                    "filters": {
                      "hasAttachment": true
                    },
                    "maxItems": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved emails with snippets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "Array of email items with snippets",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "description": "Gmail message ID"
                          },
                          "senderName": {
                            "type": "string"
                          },
                          "senderAddress": {
                            "type": "string"
                          },
                          "subject": {
                            "type": "string"
                          },
                          "receivedAt": {
                            "type": "string"
                          },
                          "snippet": {
                            "type": "string",
                            "description": "First 200-300 characters of email body (auto-truncated)"
                          },
                          "attachmentUrls": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "Signed URLs for downloading attachments. URLs expire 1 hour after this response. Maximum 50 attachments per email."
                          }
                        }
                      }
                    },
                    "subset": {
                      "type": "boolean",
                      "description": "True if more results available"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/email/quickRead": {
      "post": {
        "operationId": "macroEmailQuickRead",
        "summary": "Read full email bodies",
        "description": "Fetches complete email content with full body text and attachments. Use this when you need to READ emails, not just preview them. You can provide either: (1) specific email IDs from previous queries, OR (2) a Gmail search query. Returns full email bodies with all metadata and signed attachment URLs. Format options: 'snippet' (first 300 chars), 'minimal' (up to 5KB - recommended), 'full' (complete body). Always includes attachment metadata with download URLs that expire after 1 hour. Maximum 50 emails per request. Use this for: 'Read the email from John', 'What did the meeting invitation say?', 'Show me the full email about the project'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 50,
                    "description": "Array of Gmail message IDs to read. Get these from /macros/inbox/overview or /macros/inbox/snippets. Use this when you know which specific emails to read."
                  },
                  "searchQuery": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Gmail search query (alternative to ids). Supports Gmail operators: from:, to:, subject:, has:attachment, after:2024-01-01, etc. Example: 'from:john@example.com subject:meeting'. Use this when you need to search first, then read."
                  },
                  "format": {
                    "type": "string",
                    "enum": ["snippet", "minimal", "full"],
                    "default": "minimal",
                    "description": "Body format: 'snippet' = first 300 chars (fast), 'minimal' = up to 5KB (recommended - good balance), 'full' = complete body (may be slow for large emails)"
                  }
                },
                "oneOf": [
                  {
                    "required": ["ids"]
                  },
                  {
                    "required": ["searchQuery"]
                  }
                ]
              },
              "examples": {
                "readSpecificEmails": {
                  "summary": "Read specific emails by ID",
                  "value": {
                    "ids": ["18abc123def456", "18abc789xyz012"],
                    "format": "minimal"
                  }
                },
                "searchAndRead": {
                  "summary": "Search for emails then read them",
                  "value": {
                    "searchQuery": "from:john@example.com subject:project after:2024-10-01",
                    "format": "minimal"
                  }
                },
                "readWithAttachments": {
                  "summary": "Read emails with full body and attachments",
                  "value": {
                    "searchQuery": "has:attachment from:boss@company.com",
                    "format": "full"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved email(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response contains either a single email (mode='single') or array of emails (mode='batch')",
                  "properties": {
                    "mode": {
                      "type": "string",
                      "enum": ["single", "batch"],
                      "description": "'single' when reading 1 email, 'batch' when reading multiple"
                    },
                    "item": {
                      "type": "object",
                      "description": "Single email object (only present when mode='single')",
                      "properties": {
                        "messageId": {
                          "type": "string"
                        },
                        "subject": {
                          "type": "string"
                        },
                        "body": {
                          "type": "string",
                          "description": "Email body in requested format (snippet/minimal/full)"
                        },
                        "attachments": {
                          "type": "array",
                          "description": "Array of attachment metadata with download URLs",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "mimeType": {
                                "type": "string"
                              },
                              "url": {
                                "type": "string",
                                "description": "Signed download URL (expires in 1 hour)"
                              },
                              "blocked": {
                                "type": "boolean",
                                "description": "True if attachment is blocked by security policy (suspicious file type)"
                              }
                            }
                          }
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "description": "Array of email objects (only present when mode='batch')"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/plan": {
      "post": {
        "operationId": "macroCalendarPlan",
        "summary": "Get daily or weekly calendar schedule",
        "description": "Retrieves calendar events for a specific day or week. Returns events with computed status relative to current time (past/ongoing/upcoming). Perfect for answering: 'What's my schedule today?', 'Am I free tomorrow at 2pm?', 'Show my meetings this week'. Scope options: 'daily' = single day, 'weekly' = Monday-Sunday of the week containing specified date. Events include title, time, location, attendees, and status. Maximum 50 events per request. All times in Europe/Prague timezone. Use this for schedule overviews and availability checking.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["scope", "date"],
                "properties": {
                  "scope": {
                    "type": "string",
                    "enum": ["daily", "weekly"],
                    "description": "'daily' = single day view, 'weekly' = Monday-Sunday of the week containing the specified date"
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "Anchor date in YYYY-MM-DD format. For daily: shows this specific day. For weekly: shows the Monday-Sunday week containing this date. Resolved in Europe/Prague timezone."
                  },
                  "includePast": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, includes events that already ended. If false, only shows current and future events. Useful for 'What's next on my schedule?' vs 'Show all today's meetings'."
                  }
                }
              },
              "examples": {
                "todaySchedule": {
                  "summary": "Get today's schedule",
                  "value": {
                    "scope": "daily",
                    "date": "2025-10-19",
                    "includePast": false
                  }
                },
                "fullDayIncludingPast": {
                  "summary": "All meetings today (including past)",
                  "value": {
                    "scope": "daily",
                    "date": "2025-10-19",
                    "includePast": true
                  }
                },
                "thisWeek": {
                  "summary": "This week's schedule",
                  "value": {
                    "scope": "weekly",
                    "date": "2025-10-19",
                    "includePast": false
                  }
                },
                "nextWeek": {
                  "summary": "Next week's meetings",
                  "value": {
                    "scope": "weekly",
                    "date": "2025-10-26",
                    "includePast": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved calendar schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "range": {
                      "type": "object",
                      "description": "Time range covered by this response",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Start of time range (ISO 8601)"
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "End of time range (ISO 8601)"
                        },
                        "tz": {
                          "type": "string",
                          "description": "Timezone (always Europe/Prague)"
                        }
                      }
                    },
                    "items": {
                      "type": "array",
                      "description": "Array of calendar events",
                      "items": {
                        "type": "object",
                        "properties": {
                          "eventId": {
                            "type": "string",
                            "description": "Google Calendar event ID"
                          },
                          "title": {
                            "type": "string",
                            "description": "Event title/summary"
                          },
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Event start time (ISO 8601)"
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Event end time (ISO 8601)"
                          },
                          "status": {
                            "type": "string",
                            "enum": ["past", "ongoing", "upcoming"],
                            "description": "Computed relative to current time: 'past' = already ended, 'ongoing' = happening now, 'upcoming' = not started yet"
                          },
                          "locationText": {
                            "type": "string",
                            "description": "Meeting location (room, address, or video link)"
                          },
                          "attendees": {
                            "type": "array",
                            "description": "List of attendees",
                            "items": {
                              "type": "object",
                              "properties": {
                                "email": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/calendar/schedule": {
      "post": {
        "operationId": "macroCalendarSchedule",
        "summary": "Create new calendar event",
        "description": "Creates a new calendar event/meeting. Supports fixed time slots or flexible time proposals (returns first non-conflicting slot). Can optionally add Google Meet or Zoom conference links. Can send invites to attendees. All times in Europe/Prague timezone. Use this for: 'Schedule a meeting with John tomorrow at 2pm', 'Create an event called Team Standup every day at 9am', 'Book a 1-hour meeting sometime between 2-5pm'. Maximum 20 attendees per event. Reminders can be set in minutes before event (e.g., 15, 30, 60).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "when"],
                "properties": {
                  "title": {
                    "type": "string",
                    "maxLength": 255,
                    "description": "Event title/summary. Be descriptive: 'Team Standup', 'Client Meeting - Project X', 'Doctor Appointment'."
                  },
                  "when": {
                    "type": "object",
                    "description": "Event timing - either fixed time OR flexible proposals",
                    "properties": {
                      "fixed": {
                        "type": "object",
                        "description": "Use this for specific time slots: 'tomorrow at 2pm' -> {start: '2025-10-20T14:00:00', end: '2025-10-20T15:00:00'}",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Event start time in ISO 8601 format. Example: '2025-10-20T14:00:00' for Oct 20, 2025 at 2:00 PM"
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Event end time in ISO 8601 format"
                          }
                        },
                        "required": ["start", "end"]
                      }
                    }
                  },
                  "attendees": {
                    "type": "array",
                    "maxItems": 20,
                    "description": "List of attendees to invite. Sends calendar invites to all attendees.",
                    "items": {
                      "type": "object",
                      "required": ["email"],
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Attendee email address"
                        },
                        "name": {
                          "type": "string",
                          "description": "Attendee display name (optional)"
                        }
                      }
                    }
                  },
                  "location": {
                    "type": "string",
                    "maxLength": 500,
                    "description": "Meeting location: physical address, room number, or video link. Example: 'Conference Room A', '123 Main St', 'https://zoom.us/j/123456789'"
                  },
                  "notes": {
                    "type": "string",
                    "maxLength": 2000,
                    "description": "Event description/notes. Use for agenda, meeting purpose, preparation instructions, etc."
                  },
                  "conference": {
                    "type": "string",
                    "enum": ["none", "auto", "meet", "zoom"],
                    "default": "none",
                    "description": "'none' = no video link, 'meet' = add Google Meet link, 'zoom' = add Zoom link, 'auto' = add default conference link"
                  },
                  "reminders": {
                    "type": "array",
                    "maxItems": 5,
                    "description": "Reminder notifications in minutes before event. Common values: 15 (15 min before), 30 (30 min), 60 (1 hour), 1440 (1 day). Can set multiple reminders.",
                    "items": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1440,
                      "description": "Minutes before event to send reminder"
                    }
                  }
                }
              },
              "examples": {
                "simpleFixedTime": {
                  "summary": "Simple meeting at fixed time",
                  "value": {
                    "title": "Team Standup",
                    "when": {
                      "fixed": {
                        "start": "2025-10-20T09:00:00",
                        "end": "2025-10-20T09:30:00"
                      }
                    },
                    "reminders": [15]
                  }
                },
                "meetingWithAttendees": {
                  "summary": "Meeting with attendees and Google Meet",
                  "value": {
                    "title": "Project Review Meeting",
                    "when": {
                      "fixed": {
                        "start": "2025-10-21T14:00:00",
                        "end": "2025-10-21T15:00:00"
                      }
                    },
                    "attendees": [
                      {
                        "email": "john@example.com",
                        "name": "John Smith"
                      },
                      {
                        "email": "jane@example.com",
                        "name": "Jane Doe"
                      }
                    ],
                    "conference": "meet",
                    "notes": "Agenda: Q4 goals review, budget discussion, timeline planning",
                    "reminders": [15, 60]
                  }
                },
                "physicalMeeting": {
                  "summary": "In-person meeting with location",
                  "value": {
                    "title": "Client Meeting - Acme Corp",
                    "when": {
                      "fixed": {
                        "start": "2025-10-22T10:00:00",
                        "end": "2025-10-22T11:30:00"
                      }
                    },
                    "location": "Conference Room B, Building 2",
                    "attendees": [
                      {
                        "email": "client@acmecorp.com"
                      }
                    ],
                    "notes": "Bring presentation deck and product samples",
                    "reminders": [30, 1440]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": "object",
                      "description": "Created event details",
                      "properties": {
                        "eventId": {
                          "type": "string",
                          "description": "Google Calendar event ID"
                        },
                        "title": {
                          "type": "string"
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/contacts/safeAdd": {
      "post": {
        "operationId": "macroContactsSafeAdd",
        "summary": "Add contacts with deduplication",
        "description": "Bulk add contacts to Google Contacts with automatic duplicate detection. Can add up to 50 contacts in one request. Checks for existing contacts with similar names, emails, or phone numbers. Three deduplication strategies: 'ask' (default, returns duplicates for confirmation), 'merge' (auto-merge if >70% match), 'keepBoth' (always add new contact even if duplicate). Use 'realestate' field for company/organization name. Returns summary of created, merged, and skipped contacts. Perfect for: 'Add John Smith from Acme Corp', 'Save these business cards', 'Import contacts from email'.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["entries"],
                "properties": {
                  "entries": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 50,
                    "description": "Array of contacts to add. Each contact requires at least a name.",
                    "items": {
                      "type": "object",
                      "required": ["name"],
                      "properties": {
                        "name": {
                          "type": "string",
                          "maxLength": 255,
                          "description": "Full name of contact. Example: 'John Smith', 'Jane Doe'"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Email address. Used for duplicate detection."
                        },
                        "phone": {
                          "type": "string",
                          "maxLength": 20,
                          "description": "Phone number in any format. Example: '+420 123 456 789', '555-1234'"
                        },
                        "realestate": {
                          "type": "string",
                          "maxLength": 500,
                          "description": "Company or organization name. Example: 'Acme Corporation', 'Prague University', 'Self-employed'"
                        },
                        "notes": {
                          "type": "string",
                          "maxLength": 1000,
                          "description": "Additional notes about contact. Example: 'Met at conference', 'Speaks Czech and English', 'Prefers email'"
                        }
                      }
                    }
                  },
                  "dedupeStrategy": {
                    "type": "string",
                    "enum": ["ask", "merge", "keepBoth"],
                    "default": "ask",
                    "description": "Duplicate handling: 'ask' = return duplicates for user confirmation (safe, recommended), 'merge' = auto-merge on >70% similarity match, 'keepBoth' = always create new contact (may create duplicates)"
                  }
                }
              },
              "examples": {
                "singleContact": {
                  "summary": "Add single contact",
                  "value": {
                    "entries": [
                      {
                        "name": "John Smith",
                        "email": "john@example.com",
                        "phone": "+420 123 456 789",
                        "realestate": "Acme Corporation",
                        "notes": "Met at tech conference 2024"
                      }
                    ],
                    "dedupeStrategy": "ask"
                  }
                },
                "bulkImport": {
                  "summary": "Import multiple contacts",
                  "value": {
                    "entries": [
                      {
                        "name": "Jane Doe",
                        "email": "jane@company.com",
                        "realestate": "XYZ Inc"
                      },
                      {
                        "name": "Bob Wilson",
                        "email": "bob@startup.io",
                        "phone": "555-0123"
                      },
                      {
                        "name": "Alice Brown",
                        "email": "alice@consulting.com",
                        "realestate": "Brown Consulting"
                      }
                    ],
                    "dedupeStrategy": "merge"
                  }
                },
                "minimalContact": {
                  "summary": "Add contact with just name and email",
                  "value": {
                    "entries": [
                      {
                        "name": "Mike Johnson",
                        "email": "mike@example.com"
                      }
                    ],
                    "dedupeStrategy": "ask"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contacts processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "description": "Successfully created new contacts",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contactId": {
                            "type": "string",
                            "description": "Google Contacts ID"
                          },
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "merged": {
                      "type": "array",
                      "description": "Contacts merged with existing entries",
                      "items": {
                        "type": "object",
                        "properties": {
                          "into": {
                            "type": "string",
                            "description": "ID of existing contact that was updated"
                          },
                          "from": {
                            "type": "string",
                            "description": "Name of new contact that was merged"
                          }
                        }
                      }
                    },
                    "skipped": {
                      "type": "array",
                      "description": "Contacts skipped due to duplicates (when dedupeStrategy='ask')",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/macros/tasks/overview": {
      "post": {
        "operationId": "macroTasksOverview",
        "summary": "Get tasks overview",
        "description": "Retrieves tasks from Google Tasks grouped by status and due date. Two scopes: 'daily' (today only) or 'weekly' (this week). Returns tasks grouped into sections: today (due today), thisWeek (due this week), overdue (past due date), and optionally completed (finished tasks). Perfect for: 'What are my tasks today?', 'Show my to-do list', 'What's overdue?', 'Daily standup summary'. Use for daily planning, weekly reviews, and tracking overdue items.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["scope"],
                "properties": {
                  "scope": {
                    "type": "string",
                    "enum": ["daily", "weekly"],
                    "description": "'daily' = tasks due today only, 'weekly' = tasks due this week (Monday-Sunday)"
                  },
                  "includeCompleted": {
                    "type": "boolean",
                    "default": false,
                    "description": "If true, includes completed tasks in response. Useful for daily reviews: 'Show me what I accomplished today'."
                  }
                }
              },
              "examples": {
                "dailyTasks": {
                  "summary": "Today's tasks",
                  "value": {
                    "scope": "daily",
                    "includeCompleted": false
                  }
                },
                "dailyWithCompleted": {
                  "summary": "Today's tasks including completed",
                  "value": {
                    "scope": "daily",
                    "includeCompleted": true
                  }
                },
                "weeklyTasks": {
                  "summary": "This week's tasks",
                  "value": {
                    "scope": "weekly",
                    "includeCompleted": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sections": {
                      "type": "object",
                      "description": "Tasks grouped by section",
                      "properties": {
                        "today": {
                          "type": "array",
                          "description": "Tasks due today",
                          "items": {
                            "type": "object",
                            "properties": {
                              "taskId": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "due": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "status": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "thisWeek": {
                          "type": "array",
                          "description": "Tasks due this week (not today)"
                        },
                        "overdue": {
                          "type": "array",
                          "description": "Tasks past their due date"
                        },
                        "completed": {
                          "type": "array",
                          "description": "Completed tasks (only if includeCompleted=true)"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/mail": {
      "post": {
        "operationId": "mailRpc",
        "summary": "Advanced mail operations (RPC)",
        "description": "Low-level RPC interface for advanced mail operations. Provides granular control over Gmail with multiple operation types. Use macros for common tasks, RPC for advanced needs. Operations: 'search' (Gmail query), 'read' (full email body), 'send' (new email or draft), 'reply' (reply to email), 'modify' (mark read/star/label). Always includes attachment URLs (expire 1h). Blocked attachments have blocked:true with no URL. Use this when macros don't provide enough control.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op", "params"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["search", "read", "send", "reply", "modify"],
                    "description": "Operation type: 'search' = find emails matching query, 'read' = get full email content, 'send' = send new email or existing draft, 'reply' = reply to email, 'modify' = change email properties (mark read, star, add labels)"
                  },
                  "params": {
                    "type": "object",
                    "description": "Operation-specific parameters. For 'search': {query: 'from:john', maxResults: 50}. For 'read': {ids: ['msgid1'], format: 'full'}. For 'send': {to: ['user@example.com'], subject: 'Hello', bodyText: 'Message'}. For 'reply': {messageId: 'msgid', bodyText: 'Reply text'}. For 'modify': {ids: ['msgid'], actions: {markRead: true, star: true}}"
                  }
                }
              },
              "examples": {
                "searchEmails": {
                  "summary": "Search for emails with advanced query",
                  "value": {
                    "op": "search",
                    "params": {
                      "query": "from:john@example.com subject:meeting after:2024-10-01",
                      "maxResults": 20
                    }
                  }
                },
                "readFullEmail": {
                  "summary": "Read email with full body",
                  "value": {
                    "op": "read",
                    "params": {
                      "ids": ["18abc123def456"],
                      "format": "full"
                    }
                  }
                },
                "sendNewEmail": {
                  "summary": "Send new email",
                  "value": {
                    "op": "send",
                    "params": {
                      "to": ["recipient@example.com"],
                      "subject": "Meeting Follow-up",
                      "bodyText": "Hi, following up on our meeting..."
                    }
                  }
                },
                "replyToEmail": {
                  "summary": "Reply to an email",
                  "value": {
                    "op": "reply",
                    "params": {
                      "messageId": "18abc123def456",
                      "bodyText": "Thanks for your email. I agree with your proposal."
                    }
                  }
                },
                "markAsRead": {
                  "summary": "Mark emails as read and star them",
                  "value": {
                    "op": "modify",
                    "params": {
                      "ids": ["18abc123def456", "18xyz789abc012"],
                      "actions": {
                        "markRead": true,
                        "star": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean",
                      "description": "True if operation succeeded"
                    },
                    "data": {
                      "type": "object",
                      "description": "Operation result (varies by op type)"
                    },
                    "securityWarnings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Security warnings about blocked attachments or suspicious content"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/calendar": {
      "post": {
        "operationId": "calendarRpc",
        "summary": "Advanced calendar operations (RPC)",
        "description": "Low-level RPC interface for advanced calendar operations. Provides full CRUD control over calendar events. Use macros for common tasks (schedule/plan), RPC for advanced needs. Operations: 'list' (get events with filters), 'get' (single event details), 'create' (new event), 'update' (modify existing), 'delete' (remove event), 'checkConflicts' (validate time windows). Use this for batch operations, complex queries, or precise event management.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op", "params"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["list", "get", "create", "update", "delete"],
                    "description": "Operation: 'list' = get multiple events with filters, 'get' = get single event by ID, 'create' = create new event, 'update' = modify existing event, 'delete' = remove event"
                  },
                  "params": {
                    "type": "object",
                    "description": "Operation parameters. For 'list': {timeMin: ISO date, timeMax: ISO date}. For 'get': {eventId: 'evt123'}. For 'create': {summary: 'Title', start: {...}, end: {...}}. For 'update': {eventId: 'evt123', updates: {...}}. For 'delete': {eventId: 'evt123'}"
                  }
                }
              },
              "examples": {
                "listEvents": {
                  "summary": "List events in date range",
                  "value": {
                    "op": "list",
                    "params": {
                      "timeMin": "2025-10-20T00:00:00Z",
                      "timeMax": "2025-10-27T23:59:59Z"
                    }
                  }
                },
                "getEvent": {
                  "summary": "Get specific event details",
                  "value": {
                    "op": "get",
                    "params": {
                      "eventId": "abc123xyz"
                    }
                  }
                },
                "deleteEvent": {
                  "summary": "Delete an event",
                  "value": {
                    "op": "delete",
                    "params": {
                      "eventId": "abc123xyz"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/contacts": {
      "post": {
        "operationId": "contactsRpc",
        "summary": "Advanced contacts operations (RPC)",
        "description": "Low-level RPC interface for Google Contacts. Full CRUD control plus deduplication and bulk operations. Use macros for common tasks (safeAdd), RPC for advanced needs. Operations: 'list' (all contacts), 'search' (find by query), 'add' (single contact), 'update' (modify), 'delete' (remove), 'dedupe' (find duplicates), 'bulkUpsert' (add/update many). Maximum 100 items per bulk request.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op", "params"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["list", "search", "add", "update", "delete"],
                    "description": "Operation: 'list' = get all contacts, 'search' = find by name/email/phone, 'add' = create single contact, 'update' = modify contact, 'delete' = remove contact"
                  },
                  "params": {
                    "type": "object",
                    "description": "Operation parameters. For 'list': {}. For 'search': {query: 'john'}. For 'add': {name: 'John', email: 'john@example.com'}. For 'update': {contactId: 'id123', updates: {...}}. For 'delete': {contactId: 'id123'}"
                  }
                }
              },
              "examples": {
                "listAll": {
                  "summary": "List all contacts",
                  "value": {
                    "op": "list",
                    "params": {}
                  }
                },
                "searchContacts": {
                  "summary": "Search for contacts",
                  "value": {
                    "op": "search",
                    "params": {
                      "query": "john"
                    }
                  }
                },
                "addContact": {
                  "summary": "Add single contact",
                  "value": {
                    "op": "add",
                    "params": {
                      "name": "John Smith",
                      "email": "john@example.com",
                      "phone": "+420123456789"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rpc/tasks": {
      "post": {
        "operationId": "tasksRpc",
        "summary": "Advanced tasks operations (RPC)",
        "description": "Low-level RPC interface for Google Tasks. Full CRUD control over tasks. Use macros for overviews (tasksOverview), RPC for precise control. Operations: 'list' (get all tasks), 'get' (single task), 'create' (new task), 'update' (modify), 'delete' (remove), 'complete' (mark done), 'reopen' (mark not done). Use this for batch operations or fine-grained task management.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["op", "params"],
                "properties": {
                  "op": {
                    "type": "string",
                    "enum": ["list", "get", "create", "update", "delete", "complete"],
                    "description": "Operation: 'list' = get all tasks, 'get' = get single task, 'create' = new task, 'update' = modify task, 'delete' = remove task, 'complete' = mark done"
                  },
                  "params": {
                    "type": "object",
                    "description": "Operation parameters. For 'list': {}. For 'get': {taskId: 'id'}. For 'create': {title: 'Task title', due: 'ISO date'}. For 'update': {taskId: 'id', updates: {...}}. For 'complete': {taskId: 'id'}"
                  }
                }
              },
              "examples": {
                "listTasks": {
                  "summary": "List all tasks",
                  "value": {
                    "op": "list",
                    "params": {}
                  }
                },
                "createTask": {
                  "summary": "Create new task",
                  "value": {
                    "op": "create",
                    "params": {
                      "title": "Review proposal",
                      "due": "2025-10-25T12:00:00Z",
                      "notes": "Check budget section carefully"
                    }
                  }
                },
                "completeTask": {
                  "summary": "Mark task as complete",
                  "value": {
                    "op": "complete",
                    "params": {
                      "taskId": "task123"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
