{
  "openapi": "3.1.0",
  "info": {
    "title": "Custom GPT Facade API",
    "version": "2.0.0",
    "description": "BFF (Backend for Frontend) for Custom GPT actions. Provides high-level macros optimized for LLM consumption + unified RPC interface. Timezone: Europe/Prague. All relative time windows (today, lastHour, etc.) are resolved server-side."
  },
  "servers": [
    { "url": "https://api.example.com" }
  ],
  "tags": [
    { "name": "macros", "description": "High-level tasks optimized for GPT (inbox, calendar, contacts, tasks)." },
    { "name": "rpc", "description": "Low-level RPC operations for advanced use cases (search, modify, etc.)." },
    { "name": "confirm", "description": "Confirmation workflow for multi-step operations (enrichment, deduplication)." }
  ],
  "paths": {
    "/macros/inbox/overview": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroInboxOverview",
        "summary": "Lightweight inbox cards (no text)",
        "description": "Get recent emails without snippets. Use timeRange with relative values (today, last24h, thisWeek) for automatic server-side conversion. Max 200 items. Returns subset flag if more available. Ideal for quick overview or drill-down.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InboxOverviewRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email card list with pagination",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InboxOverviewResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/inbox/snippets": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroInboxSnippets",
        "summary": "Inbox with snippets & attachment URLs",
        "description": "Full inbox preview: includes 200-char body snippets + signed URLs for PDF/Excel/CSV files. No server-side categorizationâ€”GPT classifies. Attachment URLs expire after 1 hour. Max 50 items per request.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/InboxSnippetsRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email snippets with attachment metadata",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InboxSnippetsResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/email/quickRead": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroEmailQuickRead",
        "summary": "Read 1+ emails with attachments",
        "description": "Fetch full email bodies. Provide ids[] for direct read or searchQuery for search-first. Returns single item or batch array. Always includes attachment metadata + signed download URLs. Format: snippet (brief), minimal (default), full (complete).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmailQuickReadRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Single email or batch array",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmailQuickReadResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/calendar/plan": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroCalendarPlan",
        "summary": "Daily or weekly schedule view",
        "description": "Get events for a day or week. Computes status (past, ongoing, upcoming) relative to now. Optional: include past events with minimal detail. Useful for 'show my schedule' or 'am I free at X time?'. Max 50 events.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CalendarPlanRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Time range + event list",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CalendarPlanResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/calendar/schedule": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroCalendarSchedule",
        "summary": "Create event (with optional enrichment)",
        "description": "Schedule meeting. If enrichFromContacts=ask and contact exists: returns confirmToken (requires /macros/confirm call). For fixed time: include start/end. For flexibility: provide proposals array (returns first non-conflicting). Conference: none/auto/meet/zoom. Timezone: Europe/Prague.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CalendarScheduleRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Event created or confirmation pending",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CalendarScheduleResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "409": { "$ref": "#/components/responses/ConflictWithAlternatives" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/calendar/reminderDrafts": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroCalendarReminderDrafts",
        "summary": "Generate reminder emails for today's events",
        "description": "Create email reminders for upcoming meetings. Scans today's events with attendees, generates per-attendee reminder text. Optional template with {title}, {start}, {end}, {location}, {recipientName} placeholders. Can create Gmail drafts (requires manual send) or just return preview.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ReminderDraftsRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Draft list with preview + optional draftIds",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ReminderDraftsResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/contacts/safeAdd": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroContactsSafeAdd",
        "summary": "Add contacts with deduplication",
        "description": "Bulk add/merge contacts. If dedupeStrategy=ask and duplicates found: returns confirmToken (requires /macros/confirm). Strategy: ask (interactive), merge (auto), keepBoth (both). Uses 'realestate' field for company/org. Max 50 entries per request. Returns created/merged/skipped counts.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ContactsSafeAddRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Contacts created/merged/skipped",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ContactsSafeAddResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/tasks/overview": {
      "post": {
        "tags": ["macros"],
        "operationId": "macroTasksOverview",
        "summary": "Daily/weekly task list",
        "description": "Get tasks grouped by status. Scope: daily (today only), weekly (this week). Optional: include completed. Groups returned: today, thisWeek, overdue, completed. Useful for daily standup or project dashboard.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TasksOverviewRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks grouped by section",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/TasksOverviewResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/confirm": {
      "post": {
        "tags": ["confirm"],
        "operationId": "confirmMacroOperation",
        "summary": "Complete pending confirmation",
        "description": "Finalize operation waiting for user confirmation. Pass confirmToken from prior macro call + action (auto-fill, skip, merge, keepBoth). Returns final result.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Operation completed",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmResponse" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/confirm/{confirmToken}": {
      "get": {
        "tags": ["confirm"],
        "operationId": "getPendingConfirmationPreview",
        "summary": "Preview pending confirmation",
        "description": "Inspect what a confirmToken contains before confirming. Shows operation type, preview data, and available actions. Helps user decide (auto-fill vs skip, merge vs keepBoth).",
        "parameters": [
          {
            "name": "confirmToken",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Token from prior macro call"
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation preview",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConfirmationPreview" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/macros/confirm/{confirmToken}/cancel": {
      "post": {
        "tags": ["confirm"],
        "operationId": "cancelPendingConfirmation",
        "summary": "Cancel pending confirmation",
        "description": "Abandon a waiting confirmation. Clears the confirmToken and reverts operation state.",
        "parameters": [
          {
            "name": "confirmToken",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancelled",
            "content": {
              "application/json": { "schema": { "type": "object", "properties": { "ok": { "type": "boolean" }, "message": { "type": "string" } } } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/rpc/mail": {
      "post": {
        "tags": ["rpc"],
        "operationId": "mailRpc",
        "summary": "Mail RPC: search, read, send, reply, modify",
        "description": "Unified mail operations. Op: search (Gmail query), preview (metadata only), read (full body), send (new + draft), reply, modify (mark/star/label), attachmentPreview (text/table), labels (list/modify). Always includes attachment URLs (expire 1h). Blocked attachments have blocked:true, no URL.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MailRpcRequest" } }
          }
        },
        "responses": {
          "200": {
            "description": "Operation result + optional warnings",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MailRpcResult" } }
            }
          },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "451": { "$ref": "#/components/responses/AttachmentBlocked" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/rpc/calendar": {
      "post": {
        "tags": ["rpc"],
        "operationId": "calendarRpc",
        "summary": "Calendar RPC: CRUD + conflict checking",
        "description": "Low-level calendar ops. Op: list, get, create, update, delete, checkConflicts. Use RPC when macros don't fit. checkConflicts validates time windows before scheduling. Returns detailed conflict info (what event is blocking).",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarRpcRequest" } } }
        },
        "responses": {
          "200": { "description": "Calendar operation result", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CalendarRpcResult" } } } },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "409": { "$ref": "#/components/responses/ConflictWithAlternatives" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/rpc/contacts": {
      "post": {
        "tags": ["rpc"],
        "operationId": "contactsRpc",
        "summary": "Contacts RPC: search, CRUD, deduplication",
        "description": "Low-level contact ops. Op: list, search, add, update, delete, dedupe, bulkUpsert. Dedupe scans for name/email/phone similarity (0-1 score). Use when safeAdd macro insufficient. Max 100 items per bulk request.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContactsRpcRequest" } } } },
        "responses": {
          "200": { "description": "Contacts operation result", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ContactsRpcResult" } } } },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    },
    "/rpc/tasks": {
      "post": {
        "tags": ["rpc"],
        "operationId": "tasksRpc",
        "summary": "Tasks RPC: CRUD + status toggle",
        "description": "Low-level task ops. Op: list, get, create, update, delete, complete, reopen. Complete/reopen are status shortcuts. Use RPC for bulk operations or fine-grained control beyond /macros/tasks/overview.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TasksRpcRequest" } } } },
        "responses": {
          "200": { "description": "Tasks operation result", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TasksRpcResult" } } } },
          "400": { "$ref": "#/components/responses/ClientError" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/ServerError" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RelativeTime": {
        "type": "string",
        "description": "Relative time window resolved server-side (Europe/Prague TZ). Use instead of manual datetimes for better UX and DST handling.",
        "enum": ["lastHour", "last3h", "last24h", "today", "yesterday", "thisWeek", "last7d"]
      },
      "TimeRange": {
        "oneOf": [
          {
            "type": "object",
            "description": "Relative time window (preferred for GPT queries)",
            "properties": { "relative": { "$ref": "#/components/schemas/RelativeTime" } },
            "required": ["relative"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "description": "Absolute time window (ISO 8601, UTC)",
            "properties": {
              "start": { "type": "string", "format": "date-time", "description": "Inclusive start (ISO 8601)." },
              "end": { "type": "string", "format": "date-time", "description": "Inclusive end (ISO 8601)." }
            },
            "required": ["start", "end"],
            "additionalProperties": false
          }
        ]
      },
      "AttachmentMeta": {
        "type": "object",
        "description": "Attachment metadata (PDF/Excel/CSV/TXT/HTML supported; suspicious files have blocked:true). URLs expire 1 hour after request.",
        "properties": {
          "attachmentId": { "type": "string" },
          "name": { "type": "string" },
          "mimeType": { "type": "string" },
          "sizeBytes": { "type": "integer" },
          "url": { "type": ["string", "null"], "description": "Signed download URL or null if blocked." },
          "blocked": { "type": "boolean", "default": false },
          "scanStatus": { "type": "string", "enum": ["clean", "unknown", "blocked"] },
          "supported": { "type": "boolean", "description": "True if preview supported." }
        },
        "required": ["attachmentId", "name", "mimeType", "sizeBytes", "blocked", "scanStatus", "supported"]
      },
      "EmailCard": {
        "type": "object",
        "description": "Minimal email card for inbox overview. Lightweight, no body text.",
        "properties": {
          "messageId": { "type": "string" },
          "senderName": { "type": "string" },
          "senderAddress": { "type": "string", "format": "email" },
          "subject": { "type": "string" },
          "receivedAt": { "type": "string", "format": "date-time" },
          "inboxCategory": { "type": "string", "enum": ["primary", "work", "alerts", "newsletters", "social", "updates", "forums", "other"] },
          "label": { "type": ["string", "null"] }
        },
        "required": ["messageId", "senderAddress", "subject", "receivedAt", "inboxCategory"]
      },
      "EmailSnippetItem": {
        "allOf": [
          { "$ref": "#/components/schemas/EmailCard" },
          {
            "type": "object",
            "properties": {
              "snippet": { "type": "string", "maxLength": 300, "description": "First 200-300 chars of body (auto-truncated)." },
              "attachmentUrls": { "type": "array", "items": { "type": "string" }, "description": "Signed URLs for downloadable attachments (max 50)." }
            }
          }
        ]
      },
      "EmailDetail": {
        "allOf": [
          { "$ref": "#/components/schemas/EmailCard" },
          {
            "type": "object",
            "properties": {
              "body": { "type": ["string", "null"], "description": "Email body (format: snippet/minimal/full)." },
              "attachments": { "type": "array", "items": { "$ref": "#/components/schemas/AttachmentMeta" } }
            }
          }
        ]
      },
      "InboxOverviewRequest": {
        "type": "object",
        "properties": {
          "timeRange": { "$ref": "#/components/schemas/TimeRange" },
          "maxItems": { "type": "integer", "minimum": 1, "maximum": 200, "default": 50 },
          "filters": {
            "type": "object",
            "properties": {
              "from": { "type": "string", "description": "Sender email or name fragment." },
              "labelIds": { "type": "array", "items": { "type": "string" }, "maxItems": 10 },
              "hasAttachment": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "InboxOverviewResponse": {
        "type": "object",
        "properties": {
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/EmailCard" }, "maxItems": 200 },
          "subset": { "type": "boolean", "description": "True if more results available (pagination needed)." },
          "nextPageToken": { "type": ["string", "null"] }
        },
        "required": ["items", "subset"]
      },
      "InboxSnippetsRequest": {
        "allOf": [
          { "$ref": "#/components/schemas/InboxOverviewRequest" },
          {
            "type": "object",
            "properties": {
              "includeAttachments": { "type": "boolean", "default": true }
            }
          }
        ]
      },
      "InboxSnippetsResponse": {
        "type": "object",
        "properties": {
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/EmailSnippetItem" }, "maxItems": 200 },
          "subset": { "type": "boolean" },
          "nextPageToken": { "type": ["string", "null"] }
        },
        "required": ["items", "subset"]
      },
      "EmailQuickReadRequest": {
        "type": "object",
        "description": "Provide ids[] for direct read or searchQuery for search-first (not both).",
        "properties": {
          "ids": { "type": "array", "items": { "type": "string" }, "minItems": 1, "maxItems": 50 },
          "searchQuery": { "type": "string", "maxLength": 255, "description": "Gmail search syntax (from:, to:, has:attachment, etc.)." },
          "format": { "type": "string", "enum": ["snippet", "minimal", "metadata", "full"], "default": "minimal", "description": "snippet: first 300 chars. minimal: 5KB. full: complete body." }
        },
        "additionalProperties": false
      },
      "EmailQuickReadResponse": {
        "oneOf": [
          { "type": "object", "properties": { "mode": { "const": "single" }, "item": { "$ref": "#/components/schemas/EmailDetail" } }, "required": ["mode", "item"], "additionalProperties": false },
          { "type": "object", "properties": { "mode": { "const": "batch" }, "items": { "type": "array", "items": { "$ref": "#/components/schemas/EmailDetail" }, "maxItems": 50 } }, "required": ["mode", "items"], "additionalProperties": false }
        ]
      },
      "CalendarPlanRequest": {
        "type": "object",
        "properties": {
          "scope": { "type": "string", "enum": ["daily", "weekly"], "description": "daily: single day. weekly: Monday-Sunday." },
          "date": { "type": "string", "format": "date", "description": "Anchor date (YYYY-MM-DD). Resolved in Europe/Prague timezone." },
          "includePast": { "type": "boolean", "default": false },
          "pastTreatment": { "type": "string", "enum": ["hide", "minimal", "full"], "default": "minimal" }
        },
        "required": ["scope", "date"],
        "additionalProperties": false
      },
      "CalendarEvent": {
        "type": "object",
        "properties": {
          "eventId": { "type": "string" },
          "title": { "type": "string" },
          "start": { "type": "string", "format": "date-time" },
          "end": { "type": "string", "format": "date-time" },
          "status": { "type": "string", "enum": ["past", "ongoing", "upcoming"], "description": "Computed relative to now." },
          "locationText": { "type": ["string", "null"] },
          "mapUrl": { "type": ["string", "null"], "description": "Google Maps link (if location available)." },
          "attendees": { "type": "array", "items": { "type": "object", "properties": { "name": { "type": ["string", "null"] }, "email": { "type": "string", "format": "email" } }, "required": ["email"] } }
        },
        "required": ["eventId", "title", "start", "end", "status"]
      },
      "CalendarPlanResponse": {
        "type": "object",
        "properties": {
          "range": { "type": "object", "properties": { "start": { "type": "string", "format": "date-time" }, "end": { "type": "string", "format": "date-time" }, "tz": { "type": "string" } }, "required": ["start", "end", "tz"] },
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/CalendarEvent" }, "maxItems": 50 }
        },
        "required": ["range", "items"]
      },
      "CalendarScheduleRequest": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "maxLength": 255 },
          "when": {
            "oneOf": [
              { "type": "object", "properties": { "fixed": { "type": "object", "properties": { "start": { "type": "string", "format": "date-time" }, "end": { "type": "string", "format": "date-time" } }, "required": ["start", "end"], "additionalProperties": false } }, "required": ["fixed"], "additionalProperties": false },
              { "type": "object", "properties": { "proposals": { "type": "array", "items": { "type": "object", "properties": { "start": { "type": "string", "format": "date-time" }, "end": { "type": "string", "format": "date-time" } }, "required": ["start", "end"], "additionalProperties": false }, "minItems": 1, "maxItems": 5 } }, "required": ["proposals"], "additionalProperties": false }
            ]
          },
          "attendees": { "type": "array", "items": { "type": "object", "properties": { "email": { "type": "string", "format": "email" }, "name": { "type": ["string", "null"] } }, "required": ["email"] }, "maxItems": 20 },
          "enrichFromContacts": { "type": "string", "enum": ["ask", "auto", "off"], "default": "ask", "description": "ask: returns confirmToken if contact found. auto: auto-fill phone/address. off: skip." },
          "conference": { "type": "string", "enum": ["none", "auto", "meet", "zoom"], "default": "none" },
          "location": { "type": ["string", "null"], "maxLength": 500 },
          "notes": { "type": ["string", "null"], "maxLength": 2000 },
          "reminders": { "type": "array", "items": { "type": "string" }, "maxItems": 5, "description": "Minutes before event (15, 30, 60)." },
          "privacy": { "type": "string", "enum": ["default", "private", "public"], "default": "default" }
        },
        "required": ["title", "when"],
        "additionalProperties": false
      },
      "CalendarScheduleResponse": {
        "oneOf": [
          {
            "type": "object",
            "description": "Event successfully created.",
            "properties": {
              "event": { "$ref": "#/components/schemas/CalendarEvent" },
              "confirmToken": { "type": "null" },
              "warnings": { "type": "array", "items": { "type": "string" } }
            },
            "required": ["event"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "description": "Enrichment opportunity found; awaiting confirmation.",
            "properties": {
              "event": { "type": "null" },
              "confirmToken": { "type": "string", "description": "Pass to /macros/confirm with action=auto-fill or skip." },
              "warnings": { "type": "array", "items": { "type": "string" } }
            },
            "required": ["confirmToken"],
            "additionalProperties": false
          }
        ]
      },
      "ContactsSafeAddRequest": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "minItems": 1,
            "maxItems": 50,
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string", "maxLength": 255 },
                "email": { "type": ["string", "null"], "format": "email" },
                "phone": { "type": ["string", "null"], "maxLength": 20 },
                "realestate": { "type": ["string", "null"], "maxLength": 500, "description": "Company/org/project name." },
                "notes": { "type": ["string", "null"], "maxLength": 1000 }
              },
              "required": ["name"]
            }
          },
          "dedupeStrategy": { "type": "string", "enum": ["ask", "merge", "keepBoth"], "default": "ask", "description": "ask: returns confirmToken. merge: auto-merge on >70% match. keepBoth: always add new." }
        },
        "required": ["entries"],
        "additionalProperties": false
      },
      "ContactsSafeAddResponse": {
        "type": "object",
        "properties": {
          "created": { "type": "array", "items": { "type": "object", "properties": { "contactId": { "type": "string" }, "name": { "type": "string" }, "email": { "type": "string" } } } },
          "merged": { "type": "array", "items": { "type": "object", "properties": { "into": { "type": "string" }, "from": { "type": "string" }, "mergeScore": { "type": "integer", "minimum": 0, "maximum": 100 } } } },
          "skipped": { "type": "array", "items": { "type": "string" }, "description": "Names/emails that weren't added (duplicates awaiting decision)." },
          "confirmToken": { "type": ["string", "null"], "description": "Present if dedupeStrategy=ask and duplicates found. Call /macros/confirm." }
        },
        "required": ["created", "merged", "skipped"]
      },
      "TasksOverviewRequest": {
        "type": "object",
        "properties": {
          "scope": { "type": "string", "enum": ["daily", "weekly"] },
          "includeCompleted": { "type": "boolean", "default": false },
          "project": { "type": ["string", "null"] },
          "labelIds": { "type": "array", "items": { "type": "string" }, "maxItems": 10 }
        },
        "required": ["scope"],
        "additionalProperties": false
      },
      "TasksOverviewResponse": {
        "type": "object",
        "properties": {
          "sections": {
            "type": "object",
            "properties": {
              "today": { "type": "array", "items": { "type": "object" } },
              "thisWeek": { "type": "array", "items": { "type": "object" } },
              "overdue": { "type": "array", "items": { "type": "object" } },
              "completed": { "type": "array", "items": { "type": "object" } }
            }
          }
        },
        "required": ["sections"]
      },
      "ReminderDraftsRequest": {
        "type": "object",
        "properties": {
          "window": { "type": "string", "enum": ["today", "nextHours"], "description": "today: all events today. nextHours: next N hours (see hours param)." },
          "hours": { "type": "integer", "minimum": 1, "maximum": 24, "description": "Used only when window=nextHours." },
          "template": { "type": ["string", "null"], "maxLength": 1000, "description": "Optional text with {title}, {start}, {end}, {location}, {recipientName} placeholders." },
          "includeLocation": { "type": "boolean", "default": true },
          "createDrafts": { "type": "boolean", "default": true, "description": "If true: creates Gmail drafts (user must send manually). If false: returns preview only." },
          "perAttendee": { "type": "string", "enum": ["separate", "grouped"], "default": "separate" }
        },
        "required": ["window"],
        "additionalProperties": false
      },
      "ReminderDraftsResponse": {
        "type": "object",
        "properties": {
          "drafts": {
            "type": "array",
            "maxItems": 100,
            "items": {
              "type": "object",
              "properties": {
                "draftId": { "type": ["string", "null"], "description": "Gmail draft ID (null if createDrafts=false)." },
                "to": { "type": "string", "format": "email" },
                "subject": { "type": "string" },
                "preview": { "type": "string", "maxLength": 300 },
                "eventId": { "type": "string" }
              },
              "required": ["to", "subject", "preview", "eventId"]
            }
          },
          "subset": { "type": "boolean", "default": false, "description": "True if more drafts available (unlikely)." }
        },
        "required": ["drafts"]
      },
      "ConfirmRequest": {
        "type": "object",
        "properties": {
          "confirmToken": { "type": "string", "description": "From prior macro response." },
          "action": { "type": "string", "enum": ["auto-fill", "skip", "merge", "keepBoth"], "description": "auto-fill: use suggested enrichment. skip: create without. merge: merge duplicates. keepBoth: add both." }
        },
        "required": ["confirmToken", "action"],
        "additionalProperties": false
      },
      "ConfirmResponse": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "data": { "type": "object", "description": "Operation result (event, contact list, etc.)." }
        },
        "required": ["ok"]
      },
      "ConfirmationPreview": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "confirmToken": { "type": "string" },
          "preview": {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["enrichment", "deduplication"] },
              "operation": { "type": "string" },
              "availableActions": { "type": "array", "items": { "type": "string" } },
              "details": { "type": "object", "description": "Operation-specific preview data." }
            }
          },
          "expiresAt": { "type": "string", "format": "date-time", "description": "Token expiration (usually 10 minutes)." }
        },
        "required": ["ok", "confirmToken", "preview"]
      },
      "MailRpcRequest": {
        "type": "object",
        "required": ["op", "params"],
        "properties": {
          "op": { "type": "string", "enum": ["search", "preview", "read", "send", "reply", "modify", "attachmentPreview", "labels"], "description": "Operation: search (query), preview (metadata only), read (full), send (new/draft), reply, modify (mark/star/label), attachmentPreview, labels (list/update)." },
          "params": { "oneOf": [ { "$ref": "#/components/schemas/MailSearchParams" }, { "$ref": "#/components/schemas/MailPreviewParams" }, { "$ref": "#/components/schemas/MailReadParams" }, { "$ref": "#/components/schemas/MailSendParams" }, { "$ref": "#/components/schemas/MailReplyParams" }, { "$ref": "#/components/schemas/MailModifyParams" }, { "$ref": "#/components/schemas/MailAttachmentPreviewParams" }, { "$ref": "#/components/schemas/MailLabelsParams" } ] }
        }
      },
      "MailSearchParams": {
        "type": "object",
        "description": "Gmail-like search query (from:, to:, subject:, has:attachment, label:, after:date, etc.).",
        "properties": {
          "query": { "type": "string", "maxLength": 255 },
          "timeRange": { "$ref": "#/components/schemas/TimeRange" },
          "maxResults": { "type": "integer", "minimum": 1, "maximum": 100, "default": 50 }
        },
        "required": ["query"]
      },
      "MailPreviewParams": {
        "type": "object",
        "description": "Get metadata-only for specified message IDs (fastest).",
        "properties": { "ids": { "type": "array", "items": { "type": "string" }, "minItems": 1, "maxItems": 50 } },
        "required": ["ids"]
      },
      "MailReadParams": {
        "type": "object",
        "description": "Provide ids[] or searchQuery (not both). Returns single item or batch.",
        "properties": {
          "ids": { "type": "array", "items": { "type": "string" }, "minItems": 1, "maxItems": 50 },
          "searchQuery": { "type": "string", "maxLength": 255 },
          "format": { "type": "string", "enum": ["snippet", "minimal", "metadata", "full"], "default": "minimal" }
        }
      },
      "MailSendParams": {
        "oneOf": [
          {
            "type": "object",
            "description": "Send new email.",
            "required": ["to", "subject", "bodyText"],
            "properties": {
              "to": { "type": "array", "minItems": 1, "items": { "type": "string", "format": "email" }, "maxItems": 50 },
              "cc": { "type": "array", "items": { "type": "string", "format": "email" }, "maxItems": 50 },
              "bcc": { "type": "array", "items": { "type": "string", "format": "email" }, "maxItems": 50 },
              "subject": { "type": "string", "maxLength": 255 },
              "bodyText": { "type": "string", "maxLength": 20000 },
              "bodyHtml": { "type": ["string", "null"], "maxLength": 30000 },
              "toSelf": { "type": "boolean", "default": false },
              "confirmSelfSend": { "type": "boolean", "default": false, "description": "Required=true if toSelf=true." }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "description": "Send existing Gmail draft.",
            "required": ["draftId"],
            "properties": {
              "draftId": { "type": "string", "description": "Gmail draft ID to send." }
            },
            "additionalProperties": false
          }
        ]
      },
      "MailReplyParams": {
        "type": "object",
        "required": ["messageId", "bodyText"],
        "properties": {
          "messageId": { "type": "string" },
          "bodyText": { "type": "string", "maxLength": 20000 },
          "bodyHtml": { "type": ["string", "null"], "maxLength": 30000 },
          "includeQuote": { "type": "boolean", "default": true }
        }
      },
      "MailModifyParams": {
        "type": "object",
        "required": ["ids", "actions"],
        "properties": {
          "ids": { "type": "array", "items": { "type": "string" }, "minItems": 1, "maxItems": 100 },
          "actions": {
            "type": "object",
            "properties": {
              "markRead": { "type": "boolean" },
              "star": { "type": "boolean" },
              "addLabels": { "type": "array", "items": { "type": "string" }, "maxItems": 20 },
              "removeLabels": { "type": "array", "items": { "type": "string" }, "maxItems": 20 }
            }
          }
        }
      },
      "MailAttachmentPreviewParams": {
        "type": "object",
        "required": ["messageId", "attachmentId", "mode"],
        "properties": {
          "messageId": { "type": "string" },
          "attachmentId": { "type": "string" },
          "mode": { "type": "string", "enum": ["text", "table"], "description": "text: PDF/TXT/HTML (max 256KB). table: CSV/XLSX (max 200 rows)." },
          "maxSize": { "type": "integer", "minimum": 1, "maximum": 256, "default": 256, "description": "Max KB (text) or max rows (table)." },
          "delimiter": { "type": "string", "enum": ["auto", "comma", "semicolon", "tab"], "default": "auto", "description": "CSV delimiter (CSV only)." }
        }
      },
      "MailLabelsParams": {
        "type": "object",
        "properties": {
          "list": { "type": "boolean", "description": "If true: return all labels. If false: modify message labels." },
          "modify": {
            "type": "object",
            "properties": {
              "messageId": { "type": "string", "description": "Message ID (or use ids for batch)." },
              "ids": { "type": "array", "items": { "type": "string" }, "maxItems": 100 },
              "add": { "type": "array", "items": { "type": "string" }, "maxItems": 20 },
              "remove": { "type": "array", "items": { "type": "string" }, "maxItems": 20 }
            }
          }
        }
      },
      "MailRpcResult": {
        "type": "object",
        "properties": {
          "ok": { "type": "boolean" },
          "data": { "type": ["object", "array", "null"] },
          "securityWarnings": { "type": "array", "items": { "type": "string" }, "description": "Warnings about blocked attachments, suspicious content, etc." }
        },
        "required": ["ok"]
      },
      "CalendarRpcRequest": {
        "type": "object",
        "required": ["op", "params"],
        "properties": {
          "op": { "type": "string", "enum": ["list", "get", "create", "update", "delete", "checkConflicts"] },
          "params": { "type": "object" }
        }
      },
      "CalendarRpcResult": { "type": "object", "properties": { "ok": { "type": "boolean" }, "data": { "type": ["object", "array", "null"] } }, "required": ["ok"] },
      "ContactsRpcRequest": {
        "type": "object",
        "required": ["op", "params"],
        "properties": {
          "op": { "type": "string", "enum": ["list", "search", "add", "update", "delete", "dedupe", "bulkUpsert"] },
          "params": { "type": "object" }
        }
      },
      "ContactsRpcResult": { "type": "object", "properties": { "ok": { "type": "boolean" }, "data": { "type": ["object", "array", "null"] } }, "required": ["ok"] },
      "TasksRpcRequest": {
        "type": "object",
        "required": ["op", "params"],
        "properties": {
          "op": { "type": "string", "enum": ["list", "get", "create", "update", "delete", "complete", "reopen"] },
          "params": { "type": "object" }
        }
      },
      "TasksRpcResult": { "type": "object", "properties": { "ok": { "type": "boolean" }, "data": { "type": ["object", "array", "null"] } }, "required": ["ok"] }
    },
    "responses": {
      "ClientError": {
        "description": "4xx client error (invalid request, missing params, enum violation, etc.)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string" },
                "message": { "type": "string", "maxLength": 300 },
                "code": { "type": "string", "enum": ["INVALID_PARAM", "BAD_REQUEST", "CONFIRM_SELF_SEND_REQUIRED", "CONFIRMATION_EXPIRED"] },
                "hint": { "type": ["string", "null"], "maxLength": 200 }
              },
              "required": ["error", "message"]
            }
          }
        }
      },
      "Unauthorized": {
        "description": "401 - Not authenticated or token expired",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string" },
                "message": { "type": "string" }
              },
              "required": ["error", "message"]
            }
          }
        }
      },
      "NotFound": {
        "description": "404 - Resource not found (confirmation token expired, event not found, etc.)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string" },
                "message": { "type": "string" }
              },
              "required": ["error", "message"]
            }
          }
        }
      },
      "ConflictWithAlternatives": {
        "description": "409 - Scheduling conflict with alternative suggestions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string" },
                "message": { "type": "string" },
                "alternatives": { "type": "array", "items": { "type": "object", "properties": { "start": { "type": "string", "format": "date-time" }, "end": { "type": "string", "format": "date-time" } }, "required": ["start", "end"] }, "maxItems": 5 }
              },
              "required": ["error", "message"]
            }
          }
        }
      },
      "AttachmentBlocked": {
        "description": "451 - Attachment URL withheld due to security policy",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string" },
                "message": { "type": "string" },
                "code": { "type": "string", "const": "ATTACHMENT_BLOCKED" }
              },
              "required": ["error", "message", "code"]
            }
          }
        }
      },
      "ServerError": {
        "description": "5xx server error (temporary issue, please retry)",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": { "type": "string" },
                "message": { "type": "string" }
              },
              "required": ["error", "message"]
            }
          }
        }
      }
    }
  }
}
