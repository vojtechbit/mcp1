/**
 * Test script pro novou funkcionalitu email size handling
 * 
 * Pou≈æit√≠:
 * node test-email-size-handling.js
 */

import * as gmailService from './src/services/googleApiService.js';
import dotenv from 'dotenv';

dotenv.config();

// Test Google Sub (nahraƒè vlastn√≠m)
const TEST_GOOGLE_SUB = 'YOUR_GOOGLE_SUB_HERE';
const TEST_MESSAGE_ID = 'YOUR_MESSAGE_ID_HERE';

async function testEmailSizeHandling() {
  console.log('üß™ Testov√°n√≠ nov√© email size handling funkcionality...\n');

  try {
    // Test 1: Kontrola konstant
    console.log('üìä Test 1: Kontrola EMAIL_SIZE_LIMITS');
    console.log('MAX_SIZE_BYTES:', gmailService.EMAIL_SIZE_LIMITS.MAX_SIZE_BYTES);
    console.log('MAX_BODY_LENGTH:', gmailService.EMAIL_SIZE_LIMITS.MAX_BODY_LENGTH);
    console.log('WARNING_SIZE_BYTES:', gmailService.EMAIL_SIZE_LIMITS.WARNING_SIZE_BYTES);
    console.log('‚úÖ Konstanty jsou dostupn√©\n');

    // Test 2: Naƒçten√≠ emailu s format=snippet
    console.log('üìß Test 2: Naƒçten√≠ emailu s format=snippet');
    const snippetResult = await gmailService.readEmail(
      TEST_GOOGLE_SUB,
      TEST_MESSAGE_ID,
      { format: 'snippet' }
    );
    console.log('Snippet:', snippetResult.snippet?.substring(0, 100) + '...');
    console.log('Size estimate:', snippetResult.sizeEstimate, 'bytes');
    console.log('‚úÖ Snippet format funguje\n');

    // Test 3: Naƒçten√≠ emailu s format=metadata
    console.log('üìã Test 3: Naƒçten√≠ emailu s format=metadata');
    const metadataResult = await gmailService.readEmail(
      TEST_GOOGLE_SUB,
      TEST_MESSAGE_ID,
      { format: 'metadata' }
    );
    console.log('Headers count:', metadataResult.payload?.headers?.length || 0);
    console.log('‚úÖ Metadata format funguje\n');

    // Test 4: Naƒçten√≠ emailu s format=full a autoTruncate=true
    console.log('üì® Test 4: Naƒçten√≠ emailu s format=full a autoTruncate=true');
    const fullResult = await gmailService.readEmail(
      TEST_GOOGLE_SUB,
      TEST_MESSAGE_ID,
      { format: 'full', autoTruncate: true }
    );
    
    if (fullResult.truncated) {
      console.log('‚ö†Ô∏è  Email byl zkr√°cen!');
      console.log('P≈Øvodn√≠ velikost:', fullResult.truncationInfo.originalSize, 'bytes');
      console.log('Max povolen√° velikost:', fullResult.truncationInfo.maxAllowedSize, 'bytes');
      console.log('Body preview length:', fullResult.bodyPreview?.length, 'chars');
    } else {
      console.log('‚úÖ Email nebyl zkr√°cen (je men≈°√≠ ne≈æ limit)');
      console.log('Size estimate:', fullResult.sizeEstimate || 'N/A');
    }
    
    if (fullResult.sizeWarning) {
      console.log('‚ö†Ô∏è  Varov√°n√≠:', fullResult.sizeWarning);
    }
    console.log('‚úÖ Full format s autoTruncate funguje\n');

    console.log('üéâ V≈°echny testy pro≈°ly √∫spƒõ≈°nƒõ!');
    console.log('\nüìù Pozn√°mky:');
    console.log('- Konstanty m≈Ø≈æe≈° upravit v src/services/googleApiService.js');
    console.log('- Pro GPT Custom Actions pou≈æij OpenAPI schema z openapi-schema.json');
    console.log('- Dokumentace je v EMAIL_SIZE_HANDLING_UPDATE.md');

  } catch (error) {
    console.error('‚ùå Test selhal:', error.message);
    console.error('Stack:', error.stack);
    
    console.log('\nüí° Tip: Ujisti se ≈æe:');
    console.log('1. M√°≈° spr√°vn√Ω TEST_GOOGLE_SUB (z datab√°ze)');
    console.log('2. M√°≈° platn√Ω TEST_MESSAGE_ID');
    console.log('3. OAuth tokens jsou platn√©');
    console.log('4. Database connection funguje');
  }
}

// Spus≈• testy
testEmailSizeHandling();
